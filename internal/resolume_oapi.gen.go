// Package internal provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package internal

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// Defines values for ParameterViewControlType.
const (
	ParameterViewControlTypeBasedOnParam ParameterViewControlType = "based_on_param"

	ParameterViewControlTypeChoiceButtons ParameterViewControlType = "choice_buttons"

	ParameterViewControlTypeChoiceCombobox ParameterViewControlType = "choice_combobox"

	ParameterViewControlTypeColorPallette ParameterViewControlType = "color_pallette"

	ParameterViewControlTypeColorPicker ParameterViewControlType = "color_picker"

	ParameterViewControlTypeDurationSpinner ParameterViewControlType = "duration_spinner"

	ParameterViewControlTypeRotary ParameterViewControlType = "rotary"

	ParameterViewControlTypeSlider ParameterViewControlType = "slider"

	ParameterViewControlTypeSliderColorAlpha ParameterViewControlType = "slider_color_alpha"

	ParameterViewControlTypeSliderColorBlue ParameterViewControlType = "slider_color_blue"

	ParameterViewControlTypeSliderColorBrightness ParameterViewControlType = "slider_color_brightness"

	ParameterViewControlTypeSliderColorGreen ParameterViewControlType = "slider_color_green"

	ParameterViewControlTypeSliderColorHue ParameterViewControlType = "slider_color_hue"

	ParameterViewControlTypeSliderColorOpacity ParameterViewControlType = "slider_color_opacity"

	ParameterViewControlTypeSliderColorRed ParameterViewControlType = "slider_color_red"

	ParameterViewControlTypeSliderColorSaturation ParameterViewControlType = "slider_color_saturation"

	ParameterViewControlTypeSpinner ParameterViewControlType = "spinner"

	ParameterViewControlTypeText ParameterViewControlType = "text"

	ParameterViewControlTypeTextMultiline ParameterViewControlType = "text_multiline"
)

// Defines values for ParameterViewDisplayUnits.
const (
	ParameterViewDisplayUnitsBeats ParameterViewDisplayUnits = "beats"

	ParameterViewDisplayUnitsDecibels ParameterViewDisplayUnits = "decibels"

	ParameterViewDisplayUnitsDegrees ParameterViewDisplayUnits = "degrees"

	ParameterViewDisplayUnitsFractions ParameterViewDisplayUnits = "fractions"

	ParameterViewDisplayUnitsFramesPerSecond ParameterViewDisplayUnits = "frames_per_second"

	ParameterViewDisplayUnitsInteger ParameterViewDisplayUnits = "integer"

	ParameterViewDisplayUnitsMilliseconds ParameterViewDisplayUnits = "milliseconds"

	ParameterViewDisplayUnitsPercent ParameterViewDisplayUnits = "percent"

	ParameterViewDisplayUnitsReal ParameterViewDisplayUnits = "real"

	ParameterViewDisplayUnitsSeconds ParameterViewDisplayUnits = "seconds"
)

// An audioeffect represents a single effect in a chain of effects to be applied to a source. Properties on the audioeffect control how and what is rendered in the effect.
type AudioEffect struct {
	// A parameter containing a true or false value
	Bypassed *BooleanParameter `json:"bypassed,omitempty"`

	// The unique id of the audio effect instance
	Id *int64 `json:"id,omitempty"`

	// The name of the effect
	Name *string `json:"name,omitempty"`

	// An unstructured collection of parameters. Parameters are presented as a map where the key is the name of the parameter and the value is the parameter itself. Parameters may be any valid parameter type.
	Params *ParameterCollection `json:"params,omitempty"`
}

// Meta information for an audio file
type AudioFileInfo struct {
	// Bpm rate expressed in beats
	Bpm *float64 `json:"bpm,omitempty"`

	// Duration of file expressed as hours:seconds:minutes:milliseconds
	Duration *string `json:"duration,omitempty"`

	// Duration of file expressed as milliseconds
	DurationMs *float64 `json:"duration_ms,omitempty"`

	// Whether file is actully present on disk at the given location
	Exists *bool `json:"exists,omitempty"`

	// Number of audio channels
	NumChannels *int32 `json:"num_channels,omitempty"`

	// The location of the file on disk
	Path *string `json:"path,omitempty"`

	// Sample rate expressed in Hertz
	SampleRate *float64 `json:"sample_rate,omitempty"`
}

// An audio track, as part of a clip,layer,group or a composition
type AudioTrack struct {
	// All the effects that may be applied when the audio track is played
	Effects *[]AudioEffect `json:"effects,omitempty"`

	// A parameter containing a floating-point value with a minimum and maximum allowed value.
	Pan *RangeParameter `json:"pan,omitempty"`

	// A parameter containing a floating-point value with a minimum and maximum allowed value.
	Volume *RangeParameter `json:"volume,omitempty"`
}

// AudioTrackClip defines model for AudioTrackClip.
type AudioTrackClip struct {
	// Embedded struct due to allOf(#/components/schemas/AudioTrack)
	AudioTrack `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// The description of the source belonging to this audio track
	Description *string `json:"description,omitempty"`

	// Meta information for an audio file
	Fileinfo *AudioFileInfo `json:"fileinfo"`
}

// AutoPilot options to control automatic clip transitions
type AutoPilot struct {
	// A multiple-choice parameter
	Target *ChoiceParameter `json:"target,omitempty"`
}

// A parameter containing a true or false value
type BooleanParameter struct {
	// The unique identifier of the parameter
	Id *int64 `json:"id,omitempty"`

	// The value for the parameter
	Value *bool `json:"value,omitempty"`

	// The parameter type. This is "ParamBoolean" for this type
	Valuetype *string `json:"valuetype,omitempty"`

	// Semantic information on the parameter, contains hints about how best to display the parameter
	View *ParameterView `json:"view,omitempty"`
}

// A multiple-choice parameter
type ChoiceParameter struct {
	// The unique identifier of the parameter
	Id *int64 `json:"id,omitempty"`

	// The index of the selected option within the options
	Index *int32 `json:"index,omitempty"`

	// The list of available options for the parameter
	Options *[]string `json:"options,omitempty"`

	// The value of the selected option
	Value *string `json:"value,omitempty"`

	// The parameter type. This is "ParamChoice" for this type
	Valuetype *string `json:"valuetype,omitempty"`

	// Semantic information on the parameter, contains hints about how best to display the parameter
	View *ParameterView `json:"view,omitempty"`
}

// A single clip in the composition, which may contain a video and/or audio track
type Clip struct {
	Audio *AudioTrackClip `json:"audio,omitempty"`

	// A multiple-choice parameter
	Beatsnap *ChoiceParameter `json:"beatsnap,omitempty"`

	// A multiple-choice parameter
	Colorid *ChoiceParameter `json:"colorid,omitempty"`

	// Get whether the clip is currently connected.
	Connected *struct {
		// Embedded struct due to allOf(#/components/schemas/BooleanParameter)
		BooleanParameter `yaml:",inline"`
	} `json:"connected,omitempty"`

	// An unstructured collection of parameters. Parameters are presented as a map where the key is the name of the parameter and the value is the parameter itself. Parameters may be any valid parameter type.
	Dashboard *ParameterCollection `json:"dashboard,omitempty"`

	// A multiple-choice parameter
	Faderstart *ChoiceParameter `json:"faderstart,omitempty"`

	// The unique id of the clip
	Id *int64 `json:"id,omitempty"`

	// A multiple-choice parameter
	Ignorecolumntrigger *ChoiceParameter `json:"ignorecolumntrigger,omitempty"`

	// A parameter containing string data
	Name *StringParameter `json:"name,omitempty"`

	// Get whether the clip is currently selected. If a clip is selected the properties will show up in Arena or Avenue and in the example react application.
	Selected *struct {
		// Embedded struct due to allOf(#/components/schemas/BooleanParameter)
		BooleanParameter `yaml:",inline"`
	} `json:"selected,omitempty"`

	// A multiple-choice parameter
	Target *ChoiceParameter `json:"target,omitempty"`

	// The thumbnail properties contain information with the latest update to the thumbnail, the size (in bytes) and whether it contains the 'default' thumbnail, meaning it doesn't contain a video or audio track
	Thumbnail *struct {
		// Get whether this is a default thumbnail, shared between all clips that don't have any video or audio tracks
		IsDefault *bool `json:"is_default,omitempty"`

		// The timestamp of the last update, in milliseconds. Given as a string to prevent lesser languages from truncating the value
		LastUpdate *string `json:"last_update,omitempty"`

		// The number of bytes of data in the thumbnail
		Size *int64 `json:"size,omitempty"`
	} `json:"thumbnail,omitempty"`

	// Only Timeline and BPM Sync transport types are supported at the moment
	Transport *interface{} `json:"transport,omitempty"`

	// A multiple-choice parameter
	Transporttype *ChoiceParameter `json:"transporttype,omitempty"`

	// A multiple-choice parameter
	Triggerstyle *ChoiceParameter `json:"triggerstyle,omitempty"`
	Video        *VideoTrackClip  `json:"video,omitempty"`
}

// A parameter containing color data
type ColorParameter struct {
	// The unique identifier of the parameter
	Id *int64 `json:"id,omitempty"`

	// Array of colors
	Palette *[]string `json:"palette,omitempty"`

	// The color value. This always starts with a '#', followed by a number of hexadecimal values representing rgb and - optionally - the alpha channel. Each channel may be either represented by a single character - in which case the values are from 0 to 15 - or by two characters - allowing a range from 0 to 255 per channel.
	Value *string `json:"value,omitempty"`

	// The parameter type. This is "ParamColor" for this type
	Valuetype *string `json:"valuetype,omitempty"`

	// Semantic information on the parameter, contains hints about how best to display the parameter
	View *ParameterView `json:"view,omitempty"`
}

// A column within a deck
type Column struct {
	// A multiple-choice parameter
	Colorid *ChoiceParameter `json:"colorid,omitempty"`

	// Get whether the column is currently connected
	Connected *struct {
		// Embedded struct due to allOf(#/components/schemas/BooleanParameter)
		BooleanParameter `yaml:",inline"`
	} `json:"connected,omitempty"`

	// The unique identifier of the column
	Id *int64 `json:"id,omitempty"`

	// A parameter containing string data
	Name *StringParameter `json:"name,omitempty"`
}

// The complete composition, containing all the decks, layers, clips and their effects
type Composition struct {
	// An audio track, as part of a clip,layer,group or a composition
	Audio *AudioTrack `json:"audio"`

	// A parameter containing a true or false value
	Bypassed *BooleanParameter `json:"bypassed,omitempty"`

	// A multiple-choice parameter
	Clipbeatsnap *ChoiceParameter `json:"clipbeatsnap,omitempty"`

	// A multiple-choice parameter
	Cliptarget *ChoiceParameter `json:"cliptarget,omitempty"`

	// A multiple-choice parameter
	Cliptriggerstyle *ChoiceParameter `json:"cliptriggerstyle,omitempty"`

	// All columns in the composition
	Columns *[]Column `json:"columns,omitempty"`

	// Cross fade between two clips
	Crossfader *CrossFader `json:"crossfader,omitempty"`

	// An unstructured collection of parameters. Parameters are presented as a map where the key is the name of the parameter and the value is the parameter itself. Parameters may be any valid parameter type.
	Dashboard *ParameterCollection `json:"dashboard,omitempty"`

	// All decks in the composition
	Decks *[]Deck `json:"decks,omitempty"`

	// All layergroups in the composition
	Layergroups *[]LayerGroup `json:"layergroups,omitempty"`

	// All layers in the composition
	Layers *[]Layer `json:"layers,omitempty"`

	// A parameter containing a floating-point value with a minimum and maximum allowed value.
	Master *RangeParameter `json:"master,omitempty"`

	// A parameter containing string data
	Name     *StringParameter `json:"name,omitempty"`
	Selected *struct {
		// Embedded struct due to allOf(#/components/schemas/BooleanParameter)
		BooleanParameter `yaml:",inline"`
		// Embedded fields due to inline allOf schema
	} `json:"selected,omitempty"`

	// A parameter containing a floating-point value with a minimum and maximum allowed value.
	Speed *RangeParameter `json:"speed,omitempty"`

	// The controller for various tempo-related aspects of the composition
	TempoController *TempoController `json:"tempo_controller,omitempty"`

	// A video track, as part of a clip,layer,group or a composition
	Video *VideoTrack `json:"video"`
}

// Cross fade between two clips
type CrossFader struct {
	// A multiple-choice parameter
	Behaviour *ChoiceParameter `json:"behaviour,omitempty"`

	// A multiple-choice parameter
	Curve *ChoiceParameter `json:"curve,omitempty"`

	// The unique identifier of the cross fader
	Id *int64 `json:"id,omitempty"`

	// An unstructured collection of parameters. Parameters are presented as a map where the key is the name of the parameter and the value is the parameter itself. Parameters may be any valid parameter type.
	Mixer *ParameterCollection `json:"mixer,omitempty"`

	// A parameter containing a floating-point value with a minimum and maximum allowed value.
	Phase *RangeParameter `json:"phase,omitempty"`

	// A parameter that handles events, but does not contain a value
	Sidea *EventParameter `json:"sidea,omitempty"`

	// A parameter that handles events, but does not contain a value
	Sideb *EventParameter `json:"sideb,omitempty"`
}

// A deck contains a full set of layers and clips. Only the layers and clips of the active deck can be retrieved and updated.
type Deck struct {
	// A multiple-choice parameter
	Colorid *ChoiceParameter `json:"colorid,omitempty"`

	// The unique identifier of the deck
	Id *int64 `json:"id,omitempty"`

	// A parameter containing string data
	Name *StringParameter `json:"name,omitempty"`

	// A parameter containing numeric data
	Scrollx *IntegerParameter `json:"scrollx,omitempty"`

	// Get whether the deck is currently selected
	Selected *struct {
		// Embedded struct due to allOf(#/components/schemas/BooleanParameter)
		BooleanParameter `yaml:",inline"`
	} `json:"selected,omitempty"`
}

// A parameter that handles events, but does not contain a value
type EventParameter struct {
	// The unique identifier of the parameter
	Id *int64 `json:"id,omitempty"`

	// The parameter type. This is "ParamEvent" for this type
	Valuetype *string `json:"valuetype,omitempty"`

	// Semantic information on the parameter, contains hints about how best to display the parameter
	View *ParameterView `json:"view,omitempty"`
}

// Frame rate expressed as ratio
type FrameRate struct {
	// Denominator
	Height *int32 `json:"height,omitempty"`

	// Numerator
	Num *int32 `json:"num,omitempty"`
}

// A parameter containing numeric data
type IntegerParameter struct {
	// The unique identifier of the parameter
	Id *int64 `json:"id,omitempty"`

	// The value for the parameter
	Value *int64 `json:"value,omitempty"`

	// The parameter type. This is "ParamNumber" for this type
	Valuetype *string `json:"valuetype,omitempty"`

	// Semantic information on the parameter, contains hints about how best to display the parameter
	View *ParameterView `json:"view,omitempty"`
}

// A layer is a container for clips that has its own dashboard and can be selected
type Layer struct {
	// An audio track, as part of a clip,layer,group or a composition
	Audio *AudioTrack `json:"audio"`

	// AutoPilot options to control automatic clip transitions
	Autopilot *AutoPilot `json:"autopilot"`

	// A parameter containing a true or false value
	Bypassed *BooleanParameter `json:"bypassed,omitempty"`

	// All clips belonging to this layer
	Clips *[]Clip `json:"clips,omitempty"`

	// A multiple-choice parameter
	Colorid *ChoiceParameter `json:"colorid,omitempty"`

	// A multiple-choice parameter
	Crossfadergroup *ChoiceParameter `json:"crossfadergroup,omitempty"`

	// An unstructured collection of parameters. Parameters are presented as a map where the key is the name of the parameter and the value is the parameter itself. Parameters may be any valid parameter type.
	Dashboard *ParameterCollection `json:"dashboard,omitempty"`

	// A parameter containing a true or false value
	Faderstart *BooleanParameter `json:"faderstart,omitempty"`

	// The unique id for the layer
	Id *int64 `json:"id,omitempty"`

	// A parameter containing a true or false value
	Ignorecolumntrigger *BooleanParameter `json:"ignorecolumntrigger,omitempty"`

	// A multiple-choice parameter
	Maskmode *ChoiceParameter `json:"maskmode,omitempty"`

	// A parameter containing a floating-point value with a minimum and maximum allowed value.
	Master *RangeParameter `json:"master,omitempty"`

	// A parameter containing string data
	Name *StringParameter `json:"name,omitempty"`

	// Get whether the layer is currently selected
	Selected *struct {
		// Embedded struct due to allOf(#/components/schemas/BooleanParameter)
		BooleanParameter `yaml:",inline"`
	} `json:"selected,omitempty"`

	// A parameter containing a true or false value
	Solo *BooleanParameter `json:"solo,omitempty"`

	// A layer transition describes the transition between clips within the layer
	Transition *LayerTransition `json:"transition,omitempty"`
	Video      *VideoTrackLayer `json:"video,omitempty"`
}

// A collection of layers, allowing controlling of a group of layers as a single object
type LayerGroup struct {
	// An audio track, as part of a clip,layer,group or a composition
	Audio *AudioTrack `json:"audio"`

	// A parameter containing a true or false value
	Bypassed *BooleanParameter `json:"bypassed,omitempty"`

	// A multiple-choice parameter
	Colorid *ChoiceParameter `json:"colorid,omitempty"`

	// A multiple-choice parameter
	Crossfadergroup *ChoiceParameter `json:"crossfadergroup,omitempty"`

	// An unstructured collection of parameters. Parameters are presented as a map where the key is the name of the parameter and the value is the parameter itself. Parameters may be any valid parameter type.
	Dashboard *ParameterCollection `json:"dashboard,omitempty"`

	// The unique id for the layer group
	Id *int64 `json:"id,omitempty"`

	// A parameter containing a true or false value
	Ignorecolumntrigger *BooleanParameter `json:"ignorecolumntrigger,omitempty"`

	// All the layers added to the layer group
	Layers *[]Layer `json:"layers,omitempty"`

	// A parameter containing a floating-point value with a minimum and maximum allowed value.
	Master *RangeParameter `json:"master,omitempty"`

	// A parameter containing string data
	Name *StringParameter `json:"name,omitempty"`

	// Get whether the layer group is currently selected
	Selected *struct {
		// Embedded struct due to allOf(#/components/schemas/BooleanParameter)
		BooleanParameter `yaml:",inline"`
	} `json:"selected,omitempty"`

	// A parameter containing a true or false value
	Solo *BooleanParameter `json:"solo,omitempty"`

	// A video track, as part of a clip,layer,group or a composition
	Video *VideoTrack `json:"video"`
}

// A layer transition describes the transition between clips within the layer
type LayerTransition struct {
	// A multiple-choice parameter
	BlendMode *ChoiceParameter `json:"blend_mode,omitempty"`

	// A parameter containing a floating-point value with a minimum and maximum allowed value.
	Duration *RangeParameter `json:"duration,omitempty"`
}

// An unstructured collection of parameters. Parameters are presented as a map where the key is the name of the parameter and the value is the parameter itself. Parameters may be any valid parameter type.
type ParameterCollection struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Semantic information on the parameter, contains hints about how best to display the parameter
type ParameterView struct {
	// Which control to show for the parameter
	ControlType *ParameterViewControlType `json:"control_type,omitempty"`

	// Which units to display.
	DisplayUnits *ParameterViewDisplayUnits `json:"display_units,omitempty"`

	// Value to multiply with when displaying value. For a parameter with a value between 0 and 1 should display as 0 to 100
	Multiplier *float64 `json:"multiplier,omitempty"`

	// Value increments to be used for e.g. sliding or rotary controls
	Step *float64 `json:"step,omitempty"`

	// The suffix to display for the variable. May be empty
	Suffix *string `json:"suffix,omitempty"`
}

// Which control to show for the parameter
type ParameterViewControlType string

// Which units to display.
type ParameterViewDisplayUnits string

// Generic information about the product serving the api
type ProductInfo struct {
	// The major version number of the Arena or Avenue instance handling the request.
	Major *int64 `json:"major,omitempty"`

	// The micro version number of the Arena or Avenue instance handling the request.
	Micro *int64 `json:"micro,omitempty"`

	// The minor version number of the Arena or Avenue instance handling the request.
	Minor *int64 `json:"minor,omitempty"`

	// The product name. This is either 'Arena' or 'Avenue'
	Name *string `json:"name,omitempty"`

	// The revision of the Arena or Avenue instance handling the request.
	Revision *int64 `json:"revision,omitempty"`
}

// A parameter containing a floating-point value with a minimum and maximum allowed value.
type RangeParameter struct {
	// The unique identifier of the parameter
	Id *int64 `json:"id,omitempty"`

	// The highest allowed value for the parameter, inclusive
	Max *float64 `json:"max,omitempty"`

	// The lowest allowed value for the parameter, inclusive
	Min *float64 `json:"min,omitempty"`

	// The value for the parameter
	Value *float64 `json:"value,omitempty"`

	// The parameter type. This is "ParamRange" for this type
	Valuetype *string `json:"valuetype,omitempty"`

	// Semantic information on the parameter, contains hints about how best to display the parameter
	View *ParameterView `json:"view,omitempty"`
}

// Options for resetting a parameter, should only the value be reset, or should animations also be reset
type ResetParameter struct {
	// If set to true, animations are also reset
	Resetanimation *bool `json:"resetanimation,omitempty"`
}

// A parameter containing string data
type StringParameter struct {
	// The unique identifier of the parameter
	Id *int64 `json:"id,omitempty"`

	// The value for the parameter
	Value *string `json:"value,omitempty"`

	// The parameter type. This is "ParamString" for this type
	Valuetype *string `json:"valuetype,omitempty"`

	// Semantic information on the parameter, contains hints about how best to display the parameter
	View *ParameterView `json:"view,omitempty"`
}

// The controller for various tempo-related aspects of the composition
type TempoController struct {
	// A parameter that handles events, but does not contain a value
	Resync *EventParameter `json:"resync,omitempty"`

	// A parameter containing a floating-point value with a minimum and maximum allowed value.
	Tempo *RangeParameter `json:"tempo,omitempty"`

	// A parameter that handles events, but does not contain a value
	TempoPull *EventParameter `json:"tempo_pull,omitempty"`

	// A parameter that handles events, but does not contain a value
	TempoPush *EventParameter `json:"tempo_push,omitempty"`

	// A parameter that handles events, but does not contain a value
	TempoTap *EventParameter `json:"tempo_tap,omitempty"`
}

// The timeline transport controls
type TransportBPMSync struct {
	// BPM Sync controls
	Controls *struct {
		// A multiple-choice parameter
		Beatloop *ChoiceParameter `json:"beatloop,omitempty"`

		// A parameter containing a floating-point value with a minimum and maximum allowed value.
		Bpm *RangeParameter `json:"bpm,omitempty"`

		// A parameter containing a floating-point value with a minimum and maximum allowed value.
		Duration *RangeParameter `json:"duration,omitempty"`

		// A multiple-choice parameter
		Playdirection *ChoiceParameter `json:"playdirection,omitempty"`

		// A multiple-choice parameter
		Playmode *ChoiceParameter `json:"playmode,omitempty"`

		// A multiple-choice parameter
		Playmodeaway *ChoiceParameter `json:"playmodeaway,omitempty"`

		// A parameter containing a floating-point value with a minimum and maximum allowed value.
		Speed *RangeParameter `json:"speed,omitempty"`

		// A multiple-choice parameter
		Syncmode *ChoiceParameter `json:"syncmode,omitempty"`
	} `json:"controls,omitempty"`

	// A parameter containing a floating-point value with a minimum and maximum allowed value.
	Position *RangeParameter `json:"position,omitempty"`
}

// The timeline transport controls
type TransportTimeline struct {
	// Timeline controls
	Controls *struct {
		// A parameter containing a floating-point value with a minimum and maximum allowed value.
		Duration *RangeParameter `json:"duration,omitempty"`

		// A multiple-choice parameter
		Playdirection *ChoiceParameter `json:"playdirection,omitempty"`

		// A multiple-choice parameter
		Playmode *ChoiceParameter `json:"playmode,omitempty"`

		// A multiple-choice parameter
		Playmodeaway *ChoiceParameter `json:"playmodeaway,omitempty"`

		// A parameter containing a floating-point value with a minimum and maximum allowed value.
		Speed *RangeParameter `json:"speed,omitempty"`
	} `json:"controls,omitempty"`

	// A parameter containing a floating-point value with a minimum and maximum allowed value.
	Position *RangeParameter `json:"position,omitempty"`
}

// A videoeffect represents a single effect in a chain of effects to be applied to a source. Properties on the videoeffect control how and what is rendered in the effect.
type VideoEffect struct {
	Bypassed *struct {
		// Embedded struct due to allOf(#/components/schemas/BooleanParameter)
		BooleanParameter `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		// Embedded fields due to inline allOf schema
	} `json:"bypassed,omitempty"`

	// An unstructured collection of parameters. Parameters are presented as a map where the key is the name of the parameter and the value is the parameter itself. Parameters may be any valid parameter type.
	Effect *ParameterCollection `json:"effect,omitempty"`

	// The unique id of the video effect instance
	Id *int64 `json:"id,omitempty"`

	// An unstructured collection of parameters. Parameters are presented as a map where the key is the name of the parameter and the value is the parameter itself. Parameters may be any valid parameter type.
	Mixer *ParameterCollection `json:"mixer,omitempty"`

	// The name of the effect
	Name *string `json:"name,omitempty"`

	// An unstructured collection of parameters. Parameters are presented as a map where the key is the name of the parameter and the value is the parameter itself. Parameters may be any valid parameter type.
	Params *ParameterCollection `json:"params,omitempty"`
}

// Meta information for a video file
type VideoFileInfo struct {
	// Duration of file expressed as hours:seconds:minutes:milliseconds
	Duration *string `json:"duration,omitempty"`

	// Duration of file expressed as milliseconds
	DurationMs *float64 `json:"duration_ms,omitempty"`

	// Whether file is actully present on disk at the given location
	Exists *bool `json:"exists,omitempty"`

	// Frame rate expressed as ratio
	Framerate *FrameRate `json:"framerate,omitempty"`

	// The number of pixels the video is high
	Height *int32 `json:"height,omitempty"`

	// The location of the file on disk
	Path *string `json:"path,omitempty"`

	// The number of pixels the video is wide
	Width *int32 `json:"width,omitempty"`
}

// A video track, as part of a clip,layer,group or a composition
type VideoTrack struct {
	// All the effects that may be applied when the video track is played
	Effects *[]VideoEffect `json:"effects,omitempty"`

	// The number of pixels the clip is high
	Height *int32 `json:"height,omitempty"`

	// An unstructured collection of parameters. Parameters are presented as a map where the key is the name of the parameter and the value is the parameter itself. Parameters may be any valid parameter type.
	Mixer *ParameterCollection `json:"mixer,omitempty"`

	// A parameter containing a floating-point value with a minimum and maximum allowed value.
	Opacity *RangeParameter `json:"opacity,omitempty"`

	// The number of pixels the clip is wide
	Width *int32 `json:"width,omitempty"`
}

// VideoTrackClip defines model for VideoTrackClip.
type VideoTrackClip struct {
	// Embedded struct due to allOf(#/components/schemas/VideoTrack)
	VideoTrack `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// A parameter containing a true or false value
	A *BooleanParameter `json:"a,omitempty"`

	// A parameter containing a true or false value
	B *BooleanParameter `json:"b,omitempty"`

	// The description of the source belonging to this video track
	Description *string `json:"description,omitempty"`

	// Meta information for a video file
	Fileinfo *VideoFileInfo `json:"fileinfo"`

	// A parameter containing a true or false value
	G *BooleanParameter `json:"g,omitempty"`

	// A parameter containing a true or false value
	R *BooleanParameter `json:"r,omitempty"`

	// A multiple-choice parameter
	Resize       *ChoiceParameter `json:"resize,omitempty"`
	Sourceparams *struct {
		// Embedded struct due to allOf(#/components/schemas/ParameterCollection)
		ParameterCollection `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		// Embedded fields due to inline allOf schema
	} `json:"sourceparams,omitempty"`
}

// VideoTrackLayer defines model for VideoTrackLayer.
type VideoTrackLayer struct {
	// Embedded struct due to allOf(#/components/schemas/VideoTrack)
	VideoTrack `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// A multiple-choice parameter
	Autosize *ChoiceParameter `json:"autosize,omitempty"`
}

// ReplaceCompositionJSONBody defines parameters for ReplaceComposition.
type ReplaceCompositionJSONBody Composition

// ReplaceClipByIdJSONBody defines parameters for ReplaceClipById.
type ReplaceClipByIdJSONBody Clip

// ClipConnectByIdJSONBody defines parameters for ClipConnectById.
type ClipConnectByIdJSONBody bool

// ResetClipParamByIdJSONBody defines parameters for ResetClipParamById.
type ResetClipParamByIdJSONBody ResetParameter

// ReplaceColumnByIdJSONBody defines parameters for ReplaceColumnById.
type ReplaceColumnByIdJSONBody Column

// ColumnConnectByIdJSONBody defines parameters for ColumnConnectById.
type ColumnConnectByIdJSONBody bool

// ResetColumnParamByIdJSONBody defines parameters for ResetColumnParamById.
type ResetColumnParamByIdJSONBody ResetParameter

// ReplaceColumnJSONBody defines parameters for ReplaceColumn.
type ReplaceColumnJSONBody Column

// ColumnConnectJSONBody defines parameters for ColumnConnect.
type ColumnConnectJSONBody bool

// ResetColumnParamJSONBody defines parameters for ResetColumnParam.
type ResetColumnParamJSONBody ResetParameter

// ReplaceDeckByIdJSONBody defines parameters for ReplaceDeckById.
type ReplaceDeckByIdJSONBody Deck

// ResetDeckParamByIdJSONBody defines parameters for ResetDeckParamById.
type ResetDeckParamByIdJSONBody ResetParameter

// ReplaceDeckJSONBody defines parameters for ReplaceDeck.
type ReplaceDeckJSONBody Deck

// ResetDeckParamJSONBody defines parameters for ResetDeckParam.
type ResetDeckParamJSONBody ResetParameter

// ReplaceEffectByIdJSONBody defines parameters for ReplaceEffectById.
type ReplaceEffectByIdJSONBody interface{}

// ReplaceLayergroupByIdJSONBody defines parameters for ReplaceLayergroupById.
type ReplaceLayergroupByIdJSONBody LayerGroup

// ResetLayerGroupParamByIdJSONBody defines parameters for ResetLayerGroupParamById.
type ResetLayerGroupParamByIdJSONBody ResetParameter

// ReplaceLayergroupJSONBody defines parameters for ReplaceLayergroup.
type ReplaceLayergroupJSONBody LayerGroup

// ResetLayerGroupParamJSONBody defines parameters for ResetLayerGroupParam.
type ResetLayerGroupParamJSONBody ResetParameter

// ReplaceLayerByIdJSONBody defines parameters for ReplaceLayerById.
type ReplaceLayerByIdJSONBody Layer

// ResetLayerParamByIdJSONBody defines parameters for ResetLayerParamById.
type ResetLayerParamByIdJSONBody ResetParameter

// ReplaceLayerJSONBody defines parameters for ReplaceLayer.
type ReplaceLayerJSONBody Layer

// ReplaceClipByPositionJSONBody defines parameters for ReplaceClipByPosition.
type ReplaceClipByPositionJSONBody Clip

// ClipConnectJSONBody defines parameters for ClipConnect.
type ClipConnectJSONBody bool

// ResetClipParamJSONBody defines parameters for ResetClipParam.
type ResetClipParamJSONBody ResetParameter

// ResetLayerParamJSONBody defines parameters for ResetLayerParam.
type ResetLayerParamJSONBody ResetParameter

// ResetCompositionParamJSONBody defines parameters for ResetCompositionParam.
type ResetCompositionParamJSONBody ResetParameter

// ReplaceCompositionJSONRequestBody defines body for ReplaceComposition for application/json ContentType.
type ReplaceCompositionJSONRequestBody ReplaceCompositionJSONBody

// ReplaceClipByIdJSONRequestBody defines body for ReplaceClipById for application/json ContentType.
type ReplaceClipByIdJSONRequestBody ReplaceClipByIdJSONBody

// ClipConnectByIdJSONRequestBody defines body for ClipConnectById for application/json ContentType.
type ClipConnectByIdJSONRequestBody ClipConnectByIdJSONBody

// ResetClipParamByIdJSONRequestBody defines body for ResetClipParamById for application/json ContentType.
type ResetClipParamByIdJSONRequestBody ResetClipParamByIdJSONBody

// ReplaceColumnByIdJSONRequestBody defines body for ReplaceColumnById for application/json ContentType.
type ReplaceColumnByIdJSONRequestBody ReplaceColumnByIdJSONBody

// ColumnConnectByIdJSONRequestBody defines body for ColumnConnectById for application/json ContentType.
type ColumnConnectByIdJSONRequestBody ColumnConnectByIdJSONBody

// ResetColumnParamByIdJSONRequestBody defines body for ResetColumnParamById for application/json ContentType.
type ResetColumnParamByIdJSONRequestBody ResetColumnParamByIdJSONBody

// ReplaceColumnJSONRequestBody defines body for ReplaceColumn for application/json ContentType.
type ReplaceColumnJSONRequestBody ReplaceColumnJSONBody

// ColumnConnectJSONRequestBody defines body for ColumnConnect for application/json ContentType.
type ColumnConnectJSONRequestBody ColumnConnectJSONBody

// ResetColumnParamJSONRequestBody defines body for ResetColumnParam for application/json ContentType.
type ResetColumnParamJSONRequestBody ResetColumnParamJSONBody

// ReplaceDeckByIdJSONRequestBody defines body for ReplaceDeckById for application/json ContentType.
type ReplaceDeckByIdJSONRequestBody ReplaceDeckByIdJSONBody

// ResetDeckParamByIdJSONRequestBody defines body for ResetDeckParamById for application/json ContentType.
type ResetDeckParamByIdJSONRequestBody ResetDeckParamByIdJSONBody

// ReplaceDeckJSONRequestBody defines body for ReplaceDeck for application/json ContentType.
type ReplaceDeckJSONRequestBody ReplaceDeckJSONBody

// ResetDeckParamJSONRequestBody defines body for ResetDeckParam for application/json ContentType.
type ResetDeckParamJSONRequestBody ResetDeckParamJSONBody

// ReplaceEffectByIdJSONRequestBody defines body for ReplaceEffectById for application/json ContentType.
type ReplaceEffectByIdJSONRequestBody ReplaceEffectByIdJSONBody

// ReplaceLayergroupByIdJSONRequestBody defines body for ReplaceLayergroupById for application/json ContentType.
type ReplaceLayergroupByIdJSONRequestBody ReplaceLayergroupByIdJSONBody

// ResetLayerGroupParamByIdJSONRequestBody defines body for ResetLayerGroupParamById for application/json ContentType.
type ResetLayerGroupParamByIdJSONRequestBody ResetLayerGroupParamByIdJSONBody

// ReplaceLayergroupJSONRequestBody defines body for ReplaceLayergroup for application/json ContentType.
type ReplaceLayergroupJSONRequestBody ReplaceLayergroupJSONBody

// ResetLayerGroupParamJSONRequestBody defines body for ResetLayerGroupParam for application/json ContentType.
type ResetLayerGroupParamJSONRequestBody ResetLayerGroupParamJSONBody

// ReplaceLayerByIdJSONRequestBody defines body for ReplaceLayerById for application/json ContentType.
type ReplaceLayerByIdJSONRequestBody ReplaceLayerByIdJSONBody

// ResetLayerParamByIdJSONRequestBody defines body for ResetLayerParamById for application/json ContentType.
type ResetLayerParamByIdJSONRequestBody ResetLayerParamByIdJSONBody

// ReplaceLayerJSONRequestBody defines body for ReplaceLayer for application/json ContentType.
type ReplaceLayerJSONRequestBody ReplaceLayerJSONBody

// ReplaceClipByPositionJSONRequestBody defines body for ReplaceClipByPosition for application/json ContentType.
type ReplaceClipByPositionJSONRequestBody ReplaceClipByPositionJSONBody

// ClipConnectJSONRequestBody defines body for ClipConnect for application/json ContentType.
type ClipConnectJSONRequestBody ClipConnectJSONBody

// ResetClipParamJSONRequestBody defines body for ResetClipParam for application/json ContentType.
type ResetClipParamJSONRequestBody ResetClipParamJSONBody

// ResetLayerParamJSONRequestBody defines body for ResetLayerParam for application/json ContentType.
type ResetLayerParamJSONRequestBody ResetLayerParamJSONBody

// ResetCompositionParamJSONRequestBody defines body for ResetCompositionParam for application/json ContentType.
type ResetCompositionParamJSONRequestBody ResetCompositionParamJSONBody

// Getter for additional properties for ParameterCollection. Returns the specified
// element and whether it was found
func (a ParameterCollection) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ParameterCollection
func (a *ParameterCollection) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ParameterCollection to handle AdditionalProperties
func (a *ParameterCollection) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ParameterCollection to handle AdditionalProperties
func (a ParameterCollection) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListComposition request
	ListComposition(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceComposition request with any body
	ReplaceCompositionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceComposition(ctx context.Context, body ReplaceCompositionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClipById request
	GetClipById(ctx context.Context, clipId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceClipById request with any body
	ReplaceClipByIdWithBody(ctx context.Context, clipId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceClipById(ctx context.Context, clipId int64, body ReplaceClipByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClipClearById request
	ClipClearById(ctx context.Context, clipId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClipConnectById request with any body
	ClipConnectByIdWithBody(ctx context.Context, clipId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ClipConnectById(ctx context.Context, clipId int64, body ClipConnectByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClipOpenfileById request with any body
	ClipOpenfileByIdWithBody(ctx context.Context, clipId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClipSelectById request
	ClipSelectById(ctx context.Context, clipId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListClipThumbnailById request
	ListClipThumbnailById(ctx context.Context, clipId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClipThumbnailByIdAndTimestamp request
	GetClipThumbnailByIdAndTimestamp(ctx context.Context, clipId int64, lastUpdated int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResetClipParamById request with any body
	ResetClipParamByIdWithBody(ctx context.Context, clipId int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResetClipParamById(ctx context.Context, clipId int64, parameter string, body ResetClipParamByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetColumnById request
	GetColumnById(ctx context.Context, columnId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceColumnById request with any body
	ReplaceColumnByIdWithBody(ctx context.Context, columnId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceColumnById(ctx context.Context, columnId int64, body ReplaceColumnByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ColumnConnectById request with any body
	ColumnConnectByIdWithBody(ctx context.Context, columnId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ColumnConnectById(ctx context.Context, columnId int64, body ColumnConnectByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResetColumnParamById request with any body
	ResetColumnParamByIdWithBody(ctx context.Context, columnId int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResetColumnParamById(ctx context.Context, columnId int64, parameter string, body ResetColumnParamByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetColumn request
	GetColumn(ctx context.Context, columnIndex int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceColumn request with any body
	ReplaceColumnWithBody(ctx context.Context, columnIndex int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceColumn(ctx context.Context, columnIndex int64, body ReplaceColumnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ColumnConnect request with any body
	ColumnConnectWithBody(ctx context.Context, columnIndex int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ColumnConnect(ctx context.Context, columnIndex int64, body ColumnConnectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResetColumnParam request with any body
	ResetColumnParamWithBody(ctx context.Context, columnIndex int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResetColumnParam(ctx context.Context, columnIndex int64, parameter string, body ResetColumnParamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeckById request
	GetDeckById(ctx context.Context, deckId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceDeckById request with any body
	ReplaceDeckByIdWithBody(ctx context.Context, deckId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceDeckById(ctx context.Context, deckId int64, body ReplaceDeckByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeckSelectById request
	DeckSelectById(ctx context.Context, deckId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResetDeckParamById request with any body
	ResetDeckParamByIdWithBody(ctx context.Context, deckId int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResetDeckParamById(ctx context.Context, deckId int64, parameter string, body ResetDeckParamByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeck request
	GetDeck(ctx context.Context, deckIndex int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceDeck request with any body
	ReplaceDeckWithBody(ctx context.Context, deckIndex int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceDeck(ctx context.Context, deckIndex int64, body ReplaceDeckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeckSelect request
	DeckSelect(ctx context.Context, deckIndex int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResetDeckParam request with any body
	ResetDeckParamWithBody(ctx context.Context, deckIndex int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResetDeckParam(ctx context.Context, deckIndex int64, parameter string, body ResetDeckParamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEffectById request
	GetEffectById(ctx context.Context, effectId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceEffectById request with any body
	ReplaceEffectByIdWithBody(ctx context.Context, effectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceEffectById(ctx context.Context, effectId int64, body ReplaceEffectByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLayergroupById request
	GetLayergroupById(ctx context.Context, layergroupId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceLayergroupById request with any body
	ReplaceLayergroupByIdWithBody(ctx context.Context, layergroupId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceLayergroupById(ctx context.Context, layergroupId int64, body ReplaceLayergroupByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LayergroupSelectById request
	LayergroupSelectById(ctx context.Context, layergroupId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResetLayerGroupParamById request with any body
	ResetLayerGroupParamByIdWithBody(ctx context.Context, layergroupId int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResetLayerGroupParamById(ctx context.Context, layergroupId int64, parameter string, body ResetLayerGroupParamByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLayergroup request
	GetLayergroup(ctx context.Context, layergroupIndex int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceLayergroup request with any body
	ReplaceLayergroupWithBody(ctx context.Context, layergroupIndex int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceLayergroup(ctx context.Context, layergroupIndex int64, body ReplaceLayergroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResetLayerGroupParam request with any body
	ResetLayerGroupParamWithBody(ctx context.Context, layergroupIndex int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResetLayerGroupParam(ctx context.Context, layergroupIndex int64, parameter string, body ResetLayerGroupParamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LayergroupSelect request
	LayergroupSelect(ctx context.Context, layergroupIndex int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLayerById request
	GetLayerById(ctx context.Context, layerId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceLayerById request with any body
	ReplaceLayerByIdWithBody(ctx context.Context, layerId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceLayerById(ctx context.Context, layerId int64, body ReplaceLayerByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LayerClearById request
	LayerClearById(ctx context.Context, layerId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LayerClearClipsById request
	LayerClearClipsById(ctx context.Context, layerId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LayerSelectById request
	LayerSelectById(ctx context.Context, layerId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResetLayerParamById request with any body
	ResetLayerParamByIdWithBody(ctx context.Context, layerId int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResetLayerParamById(ctx context.Context, layerId int64, parameter string, body ResetLayerParamByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLayer request
	GetLayer(ctx context.Context, layerIndex int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceLayer request with any body
	ReplaceLayerWithBody(ctx context.Context, layerIndex int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceLayer(ctx context.Context, layerIndex int64, body ReplaceLayerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LayerClear request
	LayerClear(ctx context.Context, layerIndex int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LayerClearClips request
	LayerClearClips(ctx context.Context, layerIndex int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClipByPosition request
	GetClipByPosition(ctx context.Context, layerIndex int64, clipIndex int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceClipByPosition request with any body
	ReplaceClipByPositionWithBody(ctx context.Context, layerIndex int64, clipIndex int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceClipByPosition(ctx context.Context, layerIndex int64, clipIndex int64, body ReplaceClipByPositionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClipClear request
	ClipClear(ctx context.Context, layerIndex int64, clipIndex int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClipConnect request with any body
	ClipConnectWithBody(ctx context.Context, layerIndex int64, clipIndex int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ClipConnect(ctx context.Context, layerIndex int64, clipIndex int64, body ClipConnectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClipOpenfile request with any body
	ClipOpenfileWithBody(ctx context.Context, layerIndex int64, clipIndex int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClipSelect request
	ClipSelect(ctx context.Context, layerIndex int64, clipIndex int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListClipThumbnailByPosition request
	ListClipThumbnailByPosition(ctx context.Context, layerIndex int64, clipIndex int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClipThumbnailByPositionAndTimestamp request
	GetClipThumbnailByPositionAndTimestamp(ctx context.Context, layerIndex int64, clipIndex int64, lastUpdated int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResetClipParam request with any body
	ResetClipParamWithBody(ctx context.Context, layerIndex int64, clipIndex int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResetClipParam(ctx context.Context, layerIndex int64, clipIndex int64, parameter string, body ResetClipParamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LayerSelect request
	LayerSelect(ctx context.Context, layerIndex int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResetLayerParam request with any body
	ResetLayerParamWithBody(ctx context.Context, layerIndex int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResetLayerParam(ctx context.Context, layerIndex int64, parameter string, body ResetLayerParamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDummyThumbnail request
	ListDummyThumbnail(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResetCompositionParam request with any body
	ResetCompositionParamWithBody(ctx context.Context, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResetCompositionParam(ctx context.Context, parameter string, body ResetCompositionParamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProduct request
	GetProduct(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListComposition(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCompositionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceCompositionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceCompositionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceComposition(ctx context.Context, body ReplaceCompositionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceCompositionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClipById(ctx context.Context, clipId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClipByIdRequest(c.Server, clipId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceClipByIdWithBody(ctx context.Context, clipId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceClipByIdRequestWithBody(c.Server, clipId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceClipById(ctx context.Context, clipId int64, body ReplaceClipByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceClipByIdRequest(c.Server, clipId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClipClearById(ctx context.Context, clipId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClipClearByIdRequest(c.Server, clipId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClipConnectByIdWithBody(ctx context.Context, clipId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClipConnectByIdRequestWithBody(c.Server, clipId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClipConnectById(ctx context.Context, clipId int64, body ClipConnectByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClipConnectByIdRequest(c.Server, clipId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClipOpenfileByIdWithBody(ctx context.Context, clipId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClipOpenfileByIdRequestWithBody(c.Server, clipId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClipSelectById(ctx context.Context, clipId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClipSelectByIdRequest(c.Server, clipId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListClipThumbnailById(ctx context.Context, clipId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListClipThumbnailByIdRequest(c.Server, clipId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClipThumbnailByIdAndTimestamp(ctx context.Context, clipId int64, lastUpdated int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClipThumbnailByIdAndTimestampRequest(c.Server, clipId, lastUpdated)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetClipParamByIdWithBody(ctx context.Context, clipId int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetClipParamByIdRequestWithBody(c.Server, clipId, parameter, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetClipParamById(ctx context.Context, clipId int64, parameter string, body ResetClipParamByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetClipParamByIdRequest(c.Server, clipId, parameter, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetColumnById(ctx context.Context, columnId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetColumnByIdRequest(c.Server, columnId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceColumnByIdWithBody(ctx context.Context, columnId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceColumnByIdRequestWithBody(c.Server, columnId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceColumnById(ctx context.Context, columnId int64, body ReplaceColumnByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceColumnByIdRequest(c.Server, columnId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ColumnConnectByIdWithBody(ctx context.Context, columnId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewColumnConnectByIdRequestWithBody(c.Server, columnId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ColumnConnectById(ctx context.Context, columnId int64, body ColumnConnectByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewColumnConnectByIdRequest(c.Server, columnId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetColumnParamByIdWithBody(ctx context.Context, columnId int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetColumnParamByIdRequestWithBody(c.Server, columnId, parameter, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetColumnParamById(ctx context.Context, columnId int64, parameter string, body ResetColumnParamByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetColumnParamByIdRequest(c.Server, columnId, parameter, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetColumn(ctx context.Context, columnIndex int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetColumnRequest(c.Server, columnIndex)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceColumnWithBody(ctx context.Context, columnIndex int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceColumnRequestWithBody(c.Server, columnIndex, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceColumn(ctx context.Context, columnIndex int64, body ReplaceColumnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceColumnRequest(c.Server, columnIndex, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ColumnConnectWithBody(ctx context.Context, columnIndex int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewColumnConnectRequestWithBody(c.Server, columnIndex, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ColumnConnect(ctx context.Context, columnIndex int64, body ColumnConnectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewColumnConnectRequest(c.Server, columnIndex, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetColumnParamWithBody(ctx context.Context, columnIndex int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetColumnParamRequestWithBody(c.Server, columnIndex, parameter, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetColumnParam(ctx context.Context, columnIndex int64, parameter string, body ResetColumnParamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetColumnParamRequest(c.Server, columnIndex, parameter, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeckById(ctx context.Context, deckId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeckByIdRequest(c.Server, deckId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceDeckByIdWithBody(ctx context.Context, deckId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceDeckByIdRequestWithBody(c.Server, deckId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceDeckById(ctx context.Context, deckId int64, body ReplaceDeckByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceDeckByIdRequest(c.Server, deckId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeckSelectById(ctx context.Context, deckId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeckSelectByIdRequest(c.Server, deckId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetDeckParamByIdWithBody(ctx context.Context, deckId int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetDeckParamByIdRequestWithBody(c.Server, deckId, parameter, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetDeckParamById(ctx context.Context, deckId int64, parameter string, body ResetDeckParamByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetDeckParamByIdRequest(c.Server, deckId, parameter, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeck(ctx context.Context, deckIndex int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeckRequest(c.Server, deckIndex)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceDeckWithBody(ctx context.Context, deckIndex int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceDeckRequestWithBody(c.Server, deckIndex, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceDeck(ctx context.Context, deckIndex int64, body ReplaceDeckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceDeckRequest(c.Server, deckIndex, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeckSelect(ctx context.Context, deckIndex int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeckSelectRequest(c.Server, deckIndex)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetDeckParamWithBody(ctx context.Context, deckIndex int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetDeckParamRequestWithBody(c.Server, deckIndex, parameter, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetDeckParam(ctx context.Context, deckIndex int64, parameter string, body ResetDeckParamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetDeckParamRequest(c.Server, deckIndex, parameter, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEffectById(ctx context.Context, effectId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEffectByIdRequest(c.Server, effectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceEffectByIdWithBody(ctx context.Context, effectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceEffectByIdRequestWithBody(c.Server, effectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceEffectById(ctx context.Context, effectId int64, body ReplaceEffectByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceEffectByIdRequest(c.Server, effectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLayergroupById(ctx context.Context, layergroupId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLayergroupByIdRequest(c.Server, layergroupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceLayergroupByIdWithBody(ctx context.Context, layergroupId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceLayergroupByIdRequestWithBody(c.Server, layergroupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceLayergroupById(ctx context.Context, layergroupId int64, body ReplaceLayergroupByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceLayergroupByIdRequest(c.Server, layergroupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LayergroupSelectById(ctx context.Context, layergroupId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLayergroupSelectByIdRequest(c.Server, layergroupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetLayerGroupParamByIdWithBody(ctx context.Context, layergroupId int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetLayerGroupParamByIdRequestWithBody(c.Server, layergroupId, parameter, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetLayerGroupParamById(ctx context.Context, layergroupId int64, parameter string, body ResetLayerGroupParamByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetLayerGroupParamByIdRequest(c.Server, layergroupId, parameter, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLayergroup(ctx context.Context, layergroupIndex int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLayergroupRequest(c.Server, layergroupIndex)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceLayergroupWithBody(ctx context.Context, layergroupIndex int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceLayergroupRequestWithBody(c.Server, layergroupIndex, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceLayergroup(ctx context.Context, layergroupIndex int64, body ReplaceLayergroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceLayergroupRequest(c.Server, layergroupIndex, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetLayerGroupParamWithBody(ctx context.Context, layergroupIndex int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetLayerGroupParamRequestWithBody(c.Server, layergroupIndex, parameter, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetLayerGroupParam(ctx context.Context, layergroupIndex int64, parameter string, body ResetLayerGroupParamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetLayerGroupParamRequest(c.Server, layergroupIndex, parameter, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LayergroupSelect(ctx context.Context, layergroupIndex int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLayergroupSelectRequest(c.Server, layergroupIndex)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLayerById(ctx context.Context, layerId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLayerByIdRequest(c.Server, layerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceLayerByIdWithBody(ctx context.Context, layerId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceLayerByIdRequestWithBody(c.Server, layerId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceLayerById(ctx context.Context, layerId int64, body ReplaceLayerByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceLayerByIdRequest(c.Server, layerId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LayerClearById(ctx context.Context, layerId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLayerClearByIdRequest(c.Server, layerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LayerClearClipsById(ctx context.Context, layerId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLayerClearClipsByIdRequest(c.Server, layerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LayerSelectById(ctx context.Context, layerId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLayerSelectByIdRequest(c.Server, layerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetLayerParamByIdWithBody(ctx context.Context, layerId int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetLayerParamByIdRequestWithBody(c.Server, layerId, parameter, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetLayerParamById(ctx context.Context, layerId int64, parameter string, body ResetLayerParamByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetLayerParamByIdRequest(c.Server, layerId, parameter, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLayer(ctx context.Context, layerIndex int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLayerRequest(c.Server, layerIndex)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceLayerWithBody(ctx context.Context, layerIndex int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceLayerRequestWithBody(c.Server, layerIndex, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceLayer(ctx context.Context, layerIndex int64, body ReplaceLayerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceLayerRequest(c.Server, layerIndex, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LayerClear(ctx context.Context, layerIndex int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLayerClearRequest(c.Server, layerIndex)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LayerClearClips(ctx context.Context, layerIndex int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLayerClearClipsRequest(c.Server, layerIndex)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClipByPosition(ctx context.Context, layerIndex int64, clipIndex int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClipByPositionRequest(c.Server, layerIndex, clipIndex)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceClipByPositionWithBody(ctx context.Context, layerIndex int64, clipIndex int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceClipByPositionRequestWithBody(c.Server, layerIndex, clipIndex, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceClipByPosition(ctx context.Context, layerIndex int64, clipIndex int64, body ReplaceClipByPositionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceClipByPositionRequest(c.Server, layerIndex, clipIndex, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClipClear(ctx context.Context, layerIndex int64, clipIndex int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClipClearRequest(c.Server, layerIndex, clipIndex)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClipConnectWithBody(ctx context.Context, layerIndex int64, clipIndex int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClipConnectRequestWithBody(c.Server, layerIndex, clipIndex, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClipConnect(ctx context.Context, layerIndex int64, clipIndex int64, body ClipConnectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClipConnectRequest(c.Server, layerIndex, clipIndex, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClipOpenfileWithBody(ctx context.Context, layerIndex int64, clipIndex int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClipOpenfileRequestWithBody(c.Server, layerIndex, clipIndex, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClipSelect(ctx context.Context, layerIndex int64, clipIndex int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClipSelectRequest(c.Server, layerIndex, clipIndex)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListClipThumbnailByPosition(ctx context.Context, layerIndex int64, clipIndex int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListClipThumbnailByPositionRequest(c.Server, layerIndex, clipIndex)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClipThumbnailByPositionAndTimestamp(ctx context.Context, layerIndex int64, clipIndex int64, lastUpdated int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClipThumbnailByPositionAndTimestampRequest(c.Server, layerIndex, clipIndex, lastUpdated)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetClipParamWithBody(ctx context.Context, layerIndex int64, clipIndex int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetClipParamRequestWithBody(c.Server, layerIndex, clipIndex, parameter, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetClipParam(ctx context.Context, layerIndex int64, clipIndex int64, parameter string, body ResetClipParamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetClipParamRequest(c.Server, layerIndex, clipIndex, parameter, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LayerSelect(ctx context.Context, layerIndex int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLayerSelectRequest(c.Server, layerIndex)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetLayerParamWithBody(ctx context.Context, layerIndex int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetLayerParamRequestWithBody(c.Server, layerIndex, parameter, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetLayerParam(ctx context.Context, layerIndex int64, parameter string, body ResetLayerParamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetLayerParamRequest(c.Server, layerIndex, parameter, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDummyThumbnail(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDummyThumbnailRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetCompositionParamWithBody(ctx context.Context, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetCompositionParamRequestWithBody(c.Server, parameter, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetCompositionParam(ctx context.Context, parameter string, body ResetCompositionParamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetCompositionParamRequest(c.Server, parameter, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProduct(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListCompositionRequest generates requests for ListComposition
func NewListCompositionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceCompositionRequest calls the generic ReplaceComposition builder with application/json body
func NewReplaceCompositionRequest(server string, body ReplaceCompositionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceCompositionRequestWithBody(server, "application/json", bodyReader)
}

// NewReplaceCompositionRequestWithBody generates requests for ReplaceComposition with any type of body
func NewReplaceCompositionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClipByIdRequest generates requests for GetClipById
func NewGetClipByIdRequest(server string, clipId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clip-id", runtime.ParamLocationPath, clipId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/clips/by-id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceClipByIdRequest calls the generic ReplaceClipById builder with application/json body
func NewReplaceClipByIdRequest(server string, clipId int64, body ReplaceClipByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceClipByIdRequestWithBody(server, clipId, "application/json", bodyReader)
}

// NewReplaceClipByIdRequestWithBody generates requests for ReplaceClipById with any type of body
func NewReplaceClipByIdRequestWithBody(server string, clipId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clip-id", runtime.ParamLocationPath, clipId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/clips/by-id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewClipClearByIdRequest generates requests for ClipClearById
func NewClipClearByIdRequest(server string, clipId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clip-id", runtime.ParamLocationPath, clipId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/clips/by-id/%s/clear", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClipConnectByIdRequest calls the generic ClipConnectById builder with application/json body
func NewClipConnectByIdRequest(server string, clipId int64, body ClipConnectByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewClipConnectByIdRequestWithBody(server, clipId, "application/json", bodyReader)
}

// NewClipConnectByIdRequestWithBody generates requests for ClipConnectById with any type of body
func NewClipConnectByIdRequestWithBody(server string, clipId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clip-id", runtime.ParamLocationPath, clipId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/clips/by-id/%s/connect", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewClipOpenfileByIdRequestWithBody generates requests for ClipOpenfileById with any type of body
func NewClipOpenfileByIdRequestWithBody(server string, clipId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clip-id", runtime.ParamLocationPath, clipId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/clips/by-id/%s/openfile", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewClipSelectByIdRequest generates requests for ClipSelectById
func NewClipSelectByIdRequest(server string, clipId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clip-id", runtime.ParamLocationPath, clipId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/clips/by-id/%s/select", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListClipThumbnailByIdRequest generates requests for ListClipThumbnailById
func NewListClipThumbnailByIdRequest(server string, clipId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clip-id", runtime.ParamLocationPath, clipId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/clips/by-id/%s/thumbnail", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClipThumbnailByIdAndTimestampRequest generates requests for GetClipThumbnailByIdAndTimestamp
func NewGetClipThumbnailByIdAndTimestampRequest(server string, clipId int64, lastUpdated int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clip-id", runtime.ParamLocationPath, clipId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "last-updated", runtime.ParamLocationPath, lastUpdated)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/clips/by-id/%s/thumbnail/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResetClipParamByIdRequest calls the generic ResetClipParamById builder with application/json body
func NewResetClipParamByIdRequest(server string, clipId int64, parameter string, body ResetClipParamByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResetClipParamByIdRequestWithBody(server, clipId, parameter, "application/json", bodyReader)
}

// NewResetClipParamByIdRequestWithBody generates requests for ResetClipParamById with any type of body
func NewResetClipParamByIdRequestWithBody(server string, clipId int64, parameter string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clip-id", runtime.ParamLocationPath, clipId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "parameter", runtime.ParamLocationPath, parameter)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/clips/%s/%s/reset", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetColumnByIdRequest generates requests for GetColumnById
func NewGetColumnByIdRequest(server string, columnId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "column-id", runtime.ParamLocationPath, columnId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/columns/by-id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceColumnByIdRequest calls the generic ReplaceColumnById builder with application/json body
func NewReplaceColumnByIdRequest(server string, columnId int64, body ReplaceColumnByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceColumnByIdRequestWithBody(server, columnId, "application/json", bodyReader)
}

// NewReplaceColumnByIdRequestWithBody generates requests for ReplaceColumnById with any type of body
func NewReplaceColumnByIdRequestWithBody(server string, columnId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "column-id", runtime.ParamLocationPath, columnId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/columns/by-id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewColumnConnectByIdRequest calls the generic ColumnConnectById builder with application/json body
func NewColumnConnectByIdRequest(server string, columnId int64, body ColumnConnectByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewColumnConnectByIdRequestWithBody(server, columnId, "application/json", bodyReader)
}

// NewColumnConnectByIdRequestWithBody generates requests for ColumnConnectById with any type of body
func NewColumnConnectByIdRequestWithBody(server string, columnId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "column-id", runtime.ParamLocationPath, columnId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/columns/by-id/%s/connect", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResetColumnParamByIdRequest calls the generic ResetColumnParamById builder with application/json body
func NewResetColumnParamByIdRequest(server string, columnId int64, parameter string, body ResetColumnParamByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResetColumnParamByIdRequestWithBody(server, columnId, parameter, "application/json", bodyReader)
}

// NewResetColumnParamByIdRequestWithBody generates requests for ResetColumnParamById with any type of body
func NewResetColumnParamByIdRequestWithBody(server string, columnId int64, parameter string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "column-id", runtime.ParamLocationPath, columnId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "parameter", runtime.ParamLocationPath, parameter)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/columns/by-id/%s/%s/reset", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetColumnRequest generates requests for GetColumn
func NewGetColumnRequest(server string, columnIndex int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "column-index", runtime.ParamLocationPath, columnIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/columns/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceColumnRequest calls the generic ReplaceColumn builder with application/json body
func NewReplaceColumnRequest(server string, columnIndex int64, body ReplaceColumnJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceColumnRequestWithBody(server, columnIndex, "application/json", bodyReader)
}

// NewReplaceColumnRequestWithBody generates requests for ReplaceColumn with any type of body
func NewReplaceColumnRequestWithBody(server string, columnIndex int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "column-index", runtime.ParamLocationPath, columnIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/columns/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewColumnConnectRequest calls the generic ColumnConnect builder with application/json body
func NewColumnConnectRequest(server string, columnIndex int64, body ColumnConnectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewColumnConnectRequestWithBody(server, columnIndex, "application/json", bodyReader)
}

// NewColumnConnectRequestWithBody generates requests for ColumnConnect with any type of body
func NewColumnConnectRequestWithBody(server string, columnIndex int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "column-index", runtime.ParamLocationPath, columnIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/columns/%s/connect", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResetColumnParamRequest calls the generic ResetColumnParam builder with application/json body
func NewResetColumnParamRequest(server string, columnIndex int64, parameter string, body ResetColumnParamJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResetColumnParamRequestWithBody(server, columnIndex, parameter, "application/json", bodyReader)
}

// NewResetColumnParamRequestWithBody generates requests for ResetColumnParam with any type of body
func NewResetColumnParamRequestWithBody(server string, columnIndex int64, parameter string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "column-index", runtime.ParamLocationPath, columnIndex)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "parameter", runtime.ParamLocationPath, parameter)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/columns/%s/%s/reset", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDeckByIdRequest generates requests for GetDeckById
func NewGetDeckByIdRequest(server string, deckId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deck-id", runtime.ParamLocationPath, deckId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/decks/by-id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceDeckByIdRequest calls the generic ReplaceDeckById builder with application/json body
func NewReplaceDeckByIdRequest(server string, deckId int64, body ReplaceDeckByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceDeckByIdRequestWithBody(server, deckId, "application/json", bodyReader)
}

// NewReplaceDeckByIdRequestWithBody generates requests for ReplaceDeckById with any type of body
func NewReplaceDeckByIdRequestWithBody(server string, deckId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deck-id", runtime.ParamLocationPath, deckId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/decks/by-id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeckSelectByIdRequest generates requests for DeckSelectById
func NewDeckSelectByIdRequest(server string, deckId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deck-id", runtime.ParamLocationPath, deckId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/decks/by-id/%s/select", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResetDeckParamByIdRequest calls the generic ResetDeckParamById builder with application/json body
func NewResetDeckParamByIdRequest(server string, deckId int64, parameter string, body ResetDeckParamByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResetDeckParamByIdRequestWithBody(server, deckId, parameter, "application/json", bodyReader)
}

// NewResetDeckParamByIdRequestWithBody generates requests for ResetDeckParamById with any type of body
func NewResetDeckParamByIdRequestWithBody(server string, deckId int64, parameter string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deck-id", runtime.ParamLocationPath, deckId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "parameter", runtime.ParamLocationPath, parameter)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/decks/by-id/%s/%s/reset", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDeckRequest generates requests for GetDeck
func NewGetDeckRequest(server string, deckIndex int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deck-index", runtime.ParamLocationPath, deckIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/decks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceDeckRequest calls the generic ReplaceDeck builder with application/json body
func NewReplaceDeckRequest(server string, deckIndex int64, body ReplaceDeckJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceDeckRequestWithBody(server, deckIndex, "application/json", bodyReader)
}

// NewReplaceDeckRequestWithBody generates requests for ReplaceDeck with any type of body
func NewReplaceDeckRequestWithBody(server string, deckIndex int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deck-index", runtime.ParamLocationPath, deckIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/decks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeckSelectRequest generates requests for DeckSelect
func NewDeckSelectRequest(server string, deckIndex int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deck-index", runtime.ParamLocationPath, deckIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/decks/%s/select", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResetDeckParamRequest calls the generic ResetDeckParam builder with application/json body
func NewResetDeckParamRequest(server string, deckIndex int64, parameter string, body ResetDeckParamJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResetDeckParamRequestWithBody(server, deckIndex, parameter, "application/json", bodyReader)
}

// NewResetDeckParamRequestWithBody generates requests for ResetDeckParam with any type of body
func NewResetDeckParamRequestWithBody(server string, deckIndex int64, parameter string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deck-index", runtime.ParamLocationPath, deckIndex)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "parameter", runtime.ParamLocationPath, parameter)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/decks/%s/%s/reset", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEffectByIdRequest generates requests for GetEffectById
func NewGetEffectByIdRequest(server string, effectId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "effect-id", runtime.ParamLocationPath, effectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/effects/by-id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceEffectByIdRequest calls the generic ReplaceEffectById builder with application/json body
func NewReplaceEffectByIdRequest(server string, effectId int64, body ReplaceEffectByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceEffectByIdRequestWithBody(server, effectId, "application/json", bodyReader)
}

// NewReplaceEffectByIdRequestWithBody generates requests for ReplaceEffectById with any type of body
func NewReplaceEffectByIdRequestWithBody(server string, effectId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "effect-id", runtime.ParamLocationPath, effectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/effects/by-id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLayergroupByIdRequest generates requests for GetLayergroupById
func NewGetLayergroupByIdRequest(server string, layergroupId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "layergroup-id", runtime.ParamLocationPath, layergroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/layergroups/by-id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceLayergroupByIdRequest calls the generic ReplaceLayergroupById builder with application/json body
func NewReplaceLayergroupByIdRequest(server string, layergroupId int64, body ReplaceLayergroupByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceLayergroupByIdRequestWithBody(server, layergroupId, "application/json", bodyReader)
}

// NewReplaceLayergroupByIdRequestWithBody generates requests for ReplaceLayergroupById with any type of body
func NewReplaceLayergroupByIdRequestWithBody(server string, layergroupId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "layergroup-id", runtime.ParamLocationPath, layergroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/layergroups/by-id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLayergroupSelectByIdRequest generates requests for LayergroupSelectById
func NewLayergroupSelectByIdRequest(server string, layergroupId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "layergroup-id", runtime.ParamLocationPath, layergroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/layergroups/by-id/%s/select", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResetLayerGroupParamByIdRequest calls the generic ResetLayerGroupParamById builder with application/json body
func NewResetLayerGroupParamByIdRequest(server string, layergroupId int64, parameter string, body ResetLayerGroupParamByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResetLayerGroupParamByIdRequestWithBody(server, layergroupId, parameter, "application/json", bodyReader)
}

// NewResetLayerGroupParamByIdRequestWithBody generates requests for ResetLayerGroupParamById with any type of body
func NewResetLayerGroupParamByIdRequestWithBody(server string, layergroupId int64, parameter string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "layergroup-id", runtime.ParamLocationPath, layergroupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "parameter", runtime.ParamLocationPath, parameter)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/layergroups/by-id/%s/%s/reset", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLayergroupRequest generates requests for GetLayergroup
func NewGetLayergroupRequest(server string, layergroupIndex int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "layergroup-index", runtime.ParamLocationPath, layergroupIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/layergroups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceLayergroupRequest calls the generic ReplaceLayergroup builder with application/json body
func NewReplaceLayergroupRequest(server string, layergroupIndex int64, body ReplaceLayergroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceLayergroupRequestWithBody(server, layergroupIndex, "application/json", bodyReader)
}

// NewReplaceLayergroupRequestWithBody generates requests for ReplaceLayergroup with any type of body
func NewReplaceLayergroupRequestWithBody(server string, layergroupIndex int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "layergroup-index", runtime.ParamLocationPath, layergroupIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/layergroups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResetLayerGroupParamRequest calls the generic ResetLayerGroupParam builder with application/json body
func NewResetLayerGroupParamRequest(server string, layergroupIndex int64, parameter string, body ResetLayerGroupParamJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResetLayerGroupParamRequestWithBody(server, layergroupIndex, parameter, "application/json", bodyReader)
}

// NewResetLayerGroupParamRequestWithBody generates requests for ResetLayerGroupParam with any type of body
func NewResetLayerGroupParamRequestWithBody(server string, layergroupIndex int64, parameter string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "layergroup-index", runtime.ParamLocationPath, layergroupIndex)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "parameter", runtime.ParamLocationPath, parameter)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/layergroups/%s/%s/reset", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLayergroupSelectRequest generates requests for LayergroupSelect
func NewLayergroupSelectRequest(server string, layergroupIndex int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "layergroup-index", runtime.ParamLocationPath, layergroupIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/layergroupss/%s/select", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLayerByIdRequest generates requests for GetLayerById
func NewGetLayerByIdRequest(server string, layerId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "layer-id", runtime.ParamLocationPath, layerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/layers/by-id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceLayerByIdRequest calls the generic ReplaceLayerById builder with application/json body
func NewReplaceLayerByIdRequest(server string, layerId int64, body ReplaceLayerByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceLayerByIdRequestWithBody(server, layerId, "application/json", bodyReader)
}

// NewReplaceLayerByIdRequestWithBody generates requests for ReplaceLayerById with any type of body
func NewReplaceLayerByIdRequestWithBody(server string, layerId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "layer-id", runtime.ParamLocationPath, layerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/layers/by-id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLayerClearByIdRequest generates requests for LayerClearById
func NewLayerClearByIdRequest(server string, layerId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "layer-id", runtime.ParamLocationPath, layerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/layers/by-id/%s/clear", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLayerClearClipsByIdRequest generates requests for LayerClearClipsById
func NewLayerClearClipsByIdRequest(server string, layerId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "layer-id", runtime.ParamLocationPath, layerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/layers/by-id/%s/clearclips", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLayerSelectByIdRequest generates requests for LayerSelectById
func NewLayerSelectByIdRequest(server string, layerId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "layer-id", runtime.ParamLocationPath, layerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/layers/by-id/%s/select", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResetLayerParamByIdRequest calls the generic ResetLayerParamById builder with application/json body
func NewResetLayerParamByIdRequest(server string, layerId int64, parameter string, body ResetLayerParamByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResetLayerParamByIdRequestWithBody(server, layerId, parameter, "application/json", bodyReader)
}

// NewResetLayerParamByIdRequestWithBody generates requests for ResetLayerParamById with any type of body
func NewResetLayerParamByIdRequestWithBody(server string, layerId int64, parameter string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "layer-id", runtime.ParamLocationPath, layerId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "parameter", runtime.ParamLocationPath, parameter)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/layers/by-id/%s/%s/reset", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLayerRequest generates requests for GetLayer
func NewGetLayerRequest(server string, layerIndex int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "layer-index", runtime.ParamLocationPath, layerIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/layers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceLayerRequest calls the generic ReplaceLayer builder with application/json body
func NewReplaceLayerRequest(server string, layerIndex int64, body ReplaceLayerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceLayerRequestWithBody(server, layerIndex, "application/json", bodyReader)
}

// NewReplaceLayerRequestWithBody generates requests for ReplaceLayer with any type of body
func NewReplaceLayerRequestWithBody(server string, layerIndex int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "layer-index", runtime.ParamLocationPath, layerIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/layers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLayerClearRequest generates requests for LayerClear
func NewLayerClearRequest(server string, layerIndex int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "layer-index", runtime.ParamLocationPath, layerIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/layers/%s/clear", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLayerClearClipsRequest generates requests for LayerClearClips
func NewLayerClearClipsRequest(server string, layerIndex int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "layer-index", runtime.ParamLocationPath, layerIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/layers/%s/clearclips", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClipByPositionRequest generates requests for GetClipByPosition
func NewGetClipByPositionRequest(server string, layerIndex int64, clipIndex int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "layer-index", runtime.ParamLocationPath, layerIndex)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clip-index", runtime.ParamLocationPath, clipIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/layers/%s/clips/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceClipByPositionRequest calls the generic ReplaceClipByPosition builder with application/json body
func NewReplaceClipByPositionRequest(server string, layerIndex int64, clipIndex int64, body ReplaceClipByPositionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceClipByPositionRequestWithBody(server, layerIndex, clipIndex, "application/json", bodyReader)
}

// NewReplaceClipByPositionRequestWithBody generates requests for ReplaceClipByPosition with any type of body
func NewReplaceClipByPositionRequestWithBody(server string, layerIndex int64, clipIndex int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "layer-index", runtime.ParamLocationPath, layerIndex)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clip-index", runtime.ParamLocationPath, clipIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/layers/%s/clips/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewClipClearRequest generates requests for ClipClear
func NewClipClearRequest(server string, layerIndex int64, clipIndex int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "layer-index", runtime.ParamLocationPath, layerIndex)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clip-index", runtime.ParamLocationPath, clipIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/layers/%s/clips/%s/clear", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClipConnectRequest calls the generic ClipConnect builder with application/json body
func NewClipConnectRequest(server string, layerIndex int64, clipIndex int64, body ClipConnectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewClipConnectRequestWithBody(server, layerIndex, clipIndex, "application/json", bodyReader)
}

// NewClipConnectRequestWithBody generates requests for ClipConnect with any type of body
func NewClipConnectRequestWithBody(server string, layerIndex int64, clipIndex int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "layer-index", runtime.ParamLocationPath, layerIndex)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clip-index", runtime.ParamLocationPath, clipIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/layers/%s/clips/%s/connect", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewClipOpenfileRequestWithBody generates requests for ClipOpenfile with any type of body
func NewClipOpenfileRequestWithBody(server string, layerIndex int64, clipIndex int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "layer-index", runtime.ParamLocationPath, layerIndex)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clip-index", runtime.ParamLocationPath, clipIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/layers/%s/clips/%s/openfile", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewClipSelectRequest generates requests for ClipSelect
func NewClipSelectRequest(server string, layerIndex int64, clipIndex int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "layer-index", runtime.ParamLocationPath, layerIndex)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clip-index", runtime.ParamLocationPath, clipIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/layers/%s/clips/%s/select", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListClipThumbnailByPositionRequest generates requests for ListClipThumbnailByPosition
func NewListClipThumbnailByPositionRequest(server string, layerIndex int64, clipIndex int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "layer-index", runtime.ParamLocationPath, layerIndex)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clip-index", runtime.ParamLocationPath, clipIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/layers/%s/clips/%s/thumbnail", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClipThumbnailByPositionAndTimestampRequest generates requests for GetClipThumbnailByPositionAndTimestamp
func NewGetClipThumbnailByPositionAndTimestampRequest(server string, layerIndex int64, clipIndex int64, lastUpdated int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "layer-index", runtime.ParamLocationPath, layerIndex)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clip-index", runtime.ParamLocationPath, clipIndex)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "last-updated", runtime.ParamLocationPath, lastUpdated)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/layers/%s/clips/%s/thumbnail/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResetClipParamRequest calls the generic ResetClipParam builder with application/json body
func NewResetClipParamRequest(server string, layerIndex int64, clipIndex int64, parameter string, body ResetClipParamJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResetClipParamRequestWithBody(server, layerIndex, clipIndex, parameter, "application/json", bodyReader)
}

// NewResetClipParamRequestWithBody generates requests for ResetClipParam with any type of body
func NewResetClipParamRequestWithBody(server string, layerIndex int64, clipIndex int64, parameter string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "layer-index", runtime.ParamLocationPath, layerIndex)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clip-index", runtime.ParamLocationPath, clipIndex)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "parameter", runtime.ParamLocationPath, parameter)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/layers/%s/clips/%s/%s/reset", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLayerSelectRequest generates requests for LayerSelect
func NewLayerSelectRequest(server string, layerIndex int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "layer-index", runtime.ParamLocationPath, layerIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/layers/%s/select", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResetLayerParamRequest calls the generic ResetLayerParam builder with application/json body
func NewResetLayerParamRequest(server string, layerIndex int64, parameter string, body ResetLayerParamJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResetLayerParamRequestWithBody(server, layerIndex, parameter, "application/json", bodyReader)
}

// NewResetLayerParamRequestWithBody generates requests for ResetLayerParam with any type of body
func NewResetLayerParamRequestWithBody(server string, layerIndex int64, parameter string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "layer-index", runtime.ParamLocationPath, layerIndex)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "parameter", runtime.ParamLocationPath, parameter)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/layers/%s/%s/reset", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListDummyThumbnailRequest generates requests for ListDummyThumbnail
func NewListDummyThumbnailRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/thumbnail/dummy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResetCompositionParamRequest calls the generic ResetCompositionParam builder with application/json body
func NewResetCompositionParamRequest(server string, parameter string, body ResetCompositionParamJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResetCompositionParamRequestWithBody(server, parameter, "application/json", bodyReader)
}

// NewResetCompositionParamRequestWithBody generates requests for ResetCompositionParam with any type of body
func NewResetCompositionParamRequestWithBody(server string, parameter string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parameter", runtime.ParamLocationPath, parameter)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/composition/%s/reset", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProductRequest generates requests for GetProduct
func NewGetProductRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/product")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListComposition request
	ListCompositionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListCompositionResponse, error)

	// ReplaceComposition request with any body
	ReplaceCompositionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceCompositionResponse, error)

	ReplaceCompositionWithResponse(ctx context.Context, body ReplaceCompositionJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceCompositionResponse, error)

	// GetClipById request
	GetClipByIdWithResponse(ctx context.Context, clipId int64, reqEditors ...RequestEditorFn) (*GetClipByIdResponse, error)

	// ReplaceClipById request with any body
	ReplaceClipByIdWithBodyWithResponse(ctx context.Context, clipId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceClipByIdResponse, error)

	ReplaceClipByIdWithResponse(ctx context.Context, clipId int64, body ReplaceClipByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceClipByIdResponse, error)

	// ClipClearById request
	ClipClearByIdWithResponse(ctx context.Context, clipId int64, reqEditors ...RequestEditorFn) (*ClipClearByIdResponse, error)

	// ClipConnectById request with any body
	ClipConnectByIdWithBodyWithResponse(ctx context.Context, clipId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ClipConnectByIdResponse, error)

	ClipConnectByIdWithResponse(ctx context.Context, clipId int64, body ClipConnectByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*ClipConnectByIdResponse, error)

	// ClipOpenfileById request with any body
	ClipOpenfileByIdWithBodyWithResponse(ctx context.Context, clipId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ClipOpenfileByIdResponse, error)

	// ClipSelectById request
	ClipSelectByIdWithResponse(ctx context.Context, clipId int64, reqEditors ...RequestEditorFn) (*ClipSelectByIdResponse, error)

	// ListClipThumbnailById request
	ListClipThumbnailByIdWithResponse(ctx context.Context, clipId int64, reqEditors ...RequestEditorFn) (*ListClipThumbnailByIdResponse, error)

	// GetClipThumbnailByIdAndTimestamp request
	GetClipThumbnailByIdAndTimestampWithResponse(ctx context.Context, clipId int64, lastUpdated int64, reqEditors ...RequestEditorFn) (*GetClipThumbnailByIdAndTimestampResponse, error)

	// ResetClipParamById request with any body
	ResetClipParamByIdWithBodyWithResponse(ctx context.Context, clipId int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetClipParamByIdResponse, error)

	ResetClipParamByIdWithResponse(ctx context.Context, clipId int64, parameter string, body ResetClipParamByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetClipParamByIdResponse, error)

	// GetColumnById request
	GetColumnByIdWithResponse(ctx context.Context, columnId int64, reqEditors ...RequestEditorFn) (*GetColumnByIdResponse, error)

	// ReplaceColumnById request with any body
	ReplaceColumnByIdWithBodyWithResponse(ctx context.Context, columnId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceColumnByIdResponse, error)

	ReplaceColumnByIdWithResponse(ctx context.Context, columnId int64, body ReplaceColumnByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceColumnByIdResponse, error)

	// ColumnConnectById request with any body
	ColumnConnectByIdWithBodyWithResponse(ctx context.Context, columnId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ColumnConnectByIdResponse, error)

	ColumnConnectByIdWithResponse(ctx context.Context, columnId int64, body ColumnConnectByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*ColumnConnectByIdResponse, error)

	// ResetColumnParamById request with any body
	ResetColumnParamByIdWithBodyWithResponse(ctx context.Context, columnId int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetColumnParamByIdResponse, error)

	ResetColumnParamByIdWithResponse(ctx context.Context, columnId int64, parameter string, body ResetColumnParamByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetColumnParamByIdResponse, error)

	// GetColumn request
	GetColumnWithResponse(ctx context.Context, columnIndex int64, reqEditors ...RequestEditorFn) (*GetColumnResponse, error)

	// ReplaceColumn request with any body
	ReplaceColumnWithBodyWithResponse(ctx context.Context, columnIndex int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceColumnResponse, error)

	ReplaceColumnWithResponse(ctx context.Context, columnIndex int64, body ReplaceColumnJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceColumnResponse, error)

	// ColumnConnect request with any body
	ColumnConnectWithBodyWithResponse(ctx context.Context, columnIndex int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ColumnConnectResponse, error)

	ColumnConnectWithResponse(ctx context.Context, columnIndex int64, body ColumnConnectJSONRequestBody, reqEditors ...RequestEditorFn) (*ColumnConnectResponse, error)

	// ResetColumnParam request with any body
	ResetColumnParamWithBodyWithResponse(ctx context.Context, columnIndex int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetColumnParamResponse, error)

	ResetColumnParamWithResponse(ctx context.Context, columnIndex int64, parameter string, body ResetColumnParamJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetColumnParamResponse, error)

	// GetDeckById request
	GetDeckByIdWithResponse(ctx context.Context, deckId int64, reqEditors ...RequestEditorFn) (*GetDeckByIdResponse, error)

	// ReplaceDeckById request with any body
	ReplaceDeckByIdWithBodyWithResponse(ctx context.Context, deckId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceDeckByIdResponse, error)

	ReplaceDeckByIdWithResponse(ctx context.Context, deckId int64, body ReplaceDeckByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceDeckByIdResponse, error)

	// DeckSelectById request
	DeckSelectByIdWithResponse(ctx context.Context, deckId int64, reqEditors ...RequestEditorFn) (*DeckSelectByIdResponse, error)

	// ResetDeckParamById request with any body
	ResetDeckParamByIdWithBodyWithResponse(ctx context.Context, deckId int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetDeckParamByIdResponse, error)

	ResetDeckParamByIdWithResponse(ctx context.Context, deckId int64, parameter string, body ResetDeckParamByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetDeckParamByIdResponse, error)

	// GetDeck request
	GetDeckWithResponse(ctx context.Context, deckIndex int64, reqEditors ...RequestEditorFn) (*GetDeckResponse, error)

	// ReplaceDeck request with any body
	ReplaceDeckWithBodyWithResponse(ctx context.Context, deckIndex int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceDeckResponse, error)

	ReplaceDeckWithResponse(ctx context.Context, deckIndex int64, body ReplaceDeckJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceDeckResponse, error)

	// DeckSelect request
	DeckSelectWithResponse(ctx context.Context, deckIndex int64, reqEditors ...RequestEditorFn) (*DeckSelectResponse, error)

	// ResetDeckParam request with any body
	ResetDeckParamWithBodyWithResponse(ctx context.Context, deckIndex int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetDeckParamResponse, error)

	ResetDeckParamWithResponse(ctx context.Context, deckIndex int64, parameter string, body ResetDeckParamJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetDeckParamResponse, error)

	// GetEffectById request
	GetEffectByIdWithResponse(ctx context.Context, effectId int64, reqEditors ...RequestEditorFn) (*GetEffectByIdResponse, error)

	// ReplaceEffectById request with any body
	ReplaceEffectByIdWithBodyWithResponse(ctx context.Context, effectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceEffectByIdResponse, error)

	ReplaceEffectByIdWithResponse(ctx context.Context, effectId int64, body ReplaceEffectByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceEffectByIdResponse, error)

	// GetLayergroupById request
	GetLayergroupByIdWithResponse(ctx context.Context, layergroupId int64, reqEditors ...RequestEditorFn) (*GetLayergroupByIdResponse, error)

	// ReplaceLayergroupById request with any body
	ReplaceLayergroupByIdWithBodyWithResponse(ctx context.Context, layergroupId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceLayergroupByIdResponse, error)

	ReplaceLayergroupByIdWithResponse(ctx context.Context, layergroupId int64, body ReplaceLayergroupByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceLayergroupByIdResponse, error)

	// LayergroupSelectById request
	LayergroupSelectByIdWithResponse(ctx context.Context, layergroupId int64, reqEditors ...RequestEditorFn) (*LayergroupSelectByIdResponse, error)

	// ResetLayerGroupParamById request with any body
	ResetLayerGroupParamByIdWithBodyWithResponse(ctx context.Context, layergroupId int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetLayerGroupParamByIdResponse, error)

	ResetLayerGroupParamByIdWithResponse(ctx context.Context, layergroupId int64, parameter string, body ResetLayerGroupParamByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetLayerGroupParamByIdResponse, error)

	// GetLayergroup request
	GetLayergroupWithResponse(ctx context.Context, layergroupIndex int64, reqEditors ...RequestEditorFn) (*GetLayergroupResponse, error)

	// ReplaceLayergroup request with any body
	ReplaceLayergroupWithBodyWithResponse(ctx context.Context, layergroupIndex int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceLayergroupResponse, error)

	ReplaceLayergroupWithResponse(ctx context.Context, layergroupIndex int64, body ReplaceLayergroupJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceLayergroupResponse, error)

	// ResetLayerGroupParam request with any body
	ResetLayerGroupParamWithBodyWithResponse(ctx context.Context, layergroupIndex int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetLayerGroupParamResponse, error)

	ResetLayerGroupParamWithResponse(ctx context.Context, layergroupIndex int64, parameter string, body ResetLayerGroupParamJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetLayerGroupParamResponse, error)

	// LayergroupSelect request
	LayergroupSelectWithResponse(ctx context.Context, layergroupIndex int64, reqEditors ...RequestEditorFn) (*LayergroupSelectResponse, error)

	// GetLayerById request
	GetLayerByIdWithResponse(ctx context.Context, layerId int64, reqEditors ...RequestEditorFn) (*GetLayerByIdResponse, error)

	// ReplaceLayerById request with any body
	ReplaceLayerByIdWithBodyWithResponse(ctx context.Context, layerId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceLayerByIdResponse, error)

	ReplaceLayerByIdWithResponse(ctx context.Context, layerId int64, body ReplaceLayerByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceLayerByIdResponse, error)

	// LayerClearById request
	LayerClearByIdWithResponse(ctx context.Context, layerId int64, reqEditors ...RequestEditorFn) (*LayerClearByIdResponse, error)

	// LayerClearClipsById request
	LayerClearClipsByIdWithResponse(ctx context.Context, layerId int64, reqEditors ...RequestEditorFn) (*LayerClearClipsByIdResponse, error)

	// LayerSelectById request
	LayerSelectByIdWithResponse(ctx context.Context, layerId int64, reqEditors ...RequestEditorFn) (*LayerSelectByIdResponse, error)

	// ResetLayerParamById request with any body
	ResetLayerParamByIdWithBodyWithResponse(ctx context.Context, layerId int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetLayerParamByIdResponse, error)

	ResetLayerParamByIdWithResponse(ctx context.Context, layerId int64, parameter string, body ResetLayerParamByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetLayerParamByIdResponse, error)

	// GetLayer request
	GetLayerWithResponse(ctx context.Context, layerIndex int64, reqEditors ...RequestEditorFn) (*GetLayerResponse, error)

	// ReplaceLayer request with any body
	ReplaceLayerWithBodyWithResponse(ctx context.Context, layerIndex int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceLayerResponse, error)

	ReplaceLayerWithResponse(ctx context.Context, layerIndex int64, body ReplaceLayerJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceLayerResponse, error)

	// LayerClear request
	LayerClearWithResponse(ctx context.Context, layerIndex int64, reqEditors ...RequestEditorFn) (*LayerClearResponse, error)

	// LayerClearClips request
	LayerClearClipsWithResponse(ctx context.Context, layerIndex int64, reqEditors ...RequestEditorFn) (*LayerClearClipsResponse, error)

	// GetClipByPosition request
	GetClipByPositionWithResponse(ctx context.Context, layerIndex int64, clipIndex int64, reqEditors ...RequestEditorFn) (*GetClipByPositionResponse, error)

	// ReplaceClipByPosition request with any body
	ReplaceClipByPositionWithBodyWithResponse(ctx context.Context, layerIndex int64, clipIndex int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceClipByPositionResponse, error)

	ReplaceClipByPositionWithResponse(ctx context.Context, layerIndex int64, clipIndex int64, body ReplaceClipByPositionJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceClipByPositionResponse, error)

	// ClipClear request
	ClipClearWithResponse(ctx context.Context, layerIndex int64, clipIndex int64, reqEditors ...RequestEditorFn) (*ClipClearResponse, error)

	// ClipConnect request with any body
	ClipConnectWithBodyWithResponse(ctx context.Context, layerIndex int64, clipIndex int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ClipConnectResponse, error)

	ClipConnectWithResponse(ctx context.Context, layerIndex int64, clipIndex int64, body ClipConnectJSONRequestBody, reqEditors ...RequestEditorFn) (*ClipConnectResponse, error)

	// ClipOpenfile request with any body
	ClipOpenfileWithBodyWithResponse(ctx context.Context, layerIndex int64, clipIndex int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ClipOpenfileResponse, error)

	// ClipSelect request
	ClipSelectWithResponse(ctx context.Context, layerIndex int64, clipIndex int64, reqEditors ...RequestEditorFn) (*ClipSelectResponse, error)

	// ListClipThumbnailByPosition request
	ListClipThumbnailByPositionWithResponse(ctx context.Context, layerIndex int64, clipIndex int64, reqEditors ...RequestEditorFn) (*ListClipThumbnailByPositionResponse, error)

	// GetClipThumbnailByPositionAndTimestamp request
	GetClipThumbnailByPositionAndTimestampWithResponse(ctx context.Context, layerIndex int64, clipIndex int64, lastUpdated int64, reqEditors ...RequestEditorFn) (*GetClipThumbnailByPositionAndTimestampResponse, error)

	// ResetClipParam request with any body
	ResetClipParamWithBodyWithResponse(ctx context.Context, layerIndex int64, clipIndex int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetClipParamResponse, error)

	ResetClipParamWithResponse(ctx context.Context, layerIndex int64, clipIndex int64, parameter string, body ResetClipParamJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetClipParamResponse, error)

	// LayerSelect request
	LayerSelectWithResponse(ctx context.Context, layerIndex int64, reqEditors ...RequestEditorFn) (*LayerSelectResponse, error)

	// ResetLayerParam request with any body
	ResetLayerParamWithBodyWithResponse(ctx context.Context, layerIndex int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetLayerParamResponse, error)

	ResetLayerParamWithResponse(ctx context.Context, layerIndex int64, parameter string, body ResetLayerParamJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetLayerParamResponse, error)

	// ListDummyThumbnail request
	ListDummyThumbnailWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListDummyThumbnailResponse, error)

	// ResetCompositionParam request with any body
	ResetCompositionParamWithBodyWithResponse(ctx context.Context, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetCompositionParamResponse, error)

	ResetCompositionParamWithResponse(ctx context.Context, parameter string, body ResetCompositionParamJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetCompositionParamResponse, error)

	// GetProduct request
	GetProductWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProductResponse, error)
}

type ListCompositionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Composition
}

// Status returns HTTPResponse.Status
func (r ListCompositionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCompositionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceCompositionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplaceCompositionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceCompositionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClipByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Clip
}

// Status returns HTTPResponse.Status
func (r GetClipByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClipByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceClipByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplaceClipByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceClipByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClipClearByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ClipClearByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClipClearByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClipConnectByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ClipConnectByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClipConnectByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClipOpenfileByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ClipOpenfileByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClipOpenfileByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClipSelectByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ClipSelectByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClipSelectByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListClipThumbnailByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListClipThumbnailByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListClipThumbnailByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClipThumbnailByIdAndTimestampResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetClipThumbnailByIdAndTimestampResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClipThumbnailByIdAndTimestampResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResetClipParamByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResetClipParamByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResetClipParamByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetColumnByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Column
}

// Status returns HTTPResponse.Status
func (r GetColumnByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetColumnByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceColumnByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplaceColumnByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceColumnByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ColumnConnectByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ColumnConnectByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ColumnConnectByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResetColumnParamByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResetColumnParamByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResetColumnParamByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetColumnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Column
}

// Status returns HTTPResponse.Status
func (r GetColumnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetColumnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceColumnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplaceColumnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceColumnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ColumnConnectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ColumnConnectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ColumnConnectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResetColumnParamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResetColumnParamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResetColumnParamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeckByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Deck
}

// Status returns HTTPResponse.Status
func (r GetDeckByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeckByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceDeckByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplaceDeckByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceDeckByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeckSelectByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeckSelectByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeckSelectByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResetDeckParamByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResetDeckParamByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResetDeckParamByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Deck
}

// Status returns HTTPResponse.Status
func (r GetDeckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceDeckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplaceDeckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceDeckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeckSelectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeckSelectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeckSelectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResetDeckParamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResetDeckParamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResetDeckParamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEffectByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r GetEffectByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEffectByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceEffectByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplaceEffectByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceEffectByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLayergroupByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LayerGroup
}

// Status returns HTTPResponse.Status
func (r GetLayergroupByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLayergroupByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceLayergroupByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplaceLayergroupByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceLayergroupByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LayergroupSelectByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LayergroupSelectByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LayergroupSelectByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResetLayerGroupParamByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResetLayerGroupParamByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResetLayerGroupParamByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLayergroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LayerGroup
}

// Status returns HTTPResponse.Status
func (r GetLayergroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLayergroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceLayergroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplaceLayergroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceLayergroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResetLayerGroupParamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResetLayerGroupParamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResetLayerGroupParamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LayergroupSelectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LayergroupSelectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LayergroupSelectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLayerByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Layer
}

// Status returns HTTPResponse.Status
func (r GetLayerByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLayerByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceLayerByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplaceLayerByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceLayerByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LayerClearByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LayerClearByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LayerClearByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LayerClearClipsByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LayerClearClipsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LayerClearClipsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LayerSelectByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LayerSelectByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LayerSelectByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResetLayerParamByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResetLayerParamByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResetLayerParamByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLayerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Layer
}

// Status returns HTTPResponse.Status
func (r GetLayerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLayerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceLayerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplaceLayerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceLayerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LayerClearResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LayerClearResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LayerClearResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LayerClearClipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LayerClearClipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LayerClearClipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClipByPositionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Clip
}

// Status returns HTTPResponse.Status
func (r GetClipByPositionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClipByPositionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceClipByPositionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplaceClipByPositionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceClipByPositionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClipClearResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ClipClearResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClipClearResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClipConnectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ClipConnectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClipConnectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClipOpenfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ClipOpenfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClipOpenfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClipSelectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ClipSelectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClipSelectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListClipThumbnailByPositionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListClipThumbnailByPositionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListClipThumbnailByPositionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClipThumbnailByPositionAndTimestampResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetClipThumbnailByPositionAndTimestampResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClipThumbnailByPositionAndTimestampResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResetClipParamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResetClipParamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResetClipParamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LayerSelectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LayerSelectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LayerSelectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResetLayerParamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResetLayerParamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResetLayerParamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDummyThumbnailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListDummyThumbnailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDummyThumbnailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResetCompositionParamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResetCompositionParamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResetCompositionParamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductInfo
}

// Status returns HTTPResponse.Status
func (r GetProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListCompositionWithResponse request returning *ListCompositionResponse
func (c *ClientWithResponses) ListCompositionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListCompositionResponse, error) {
	rsp, err := c.ListComposition(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCompositionResponse(rsp)
}

// ReplaceCompositionWithBodyWithResponse request with arbitrary body returning *ReplaceCompositionResponse
func (c *ClientWithResponses) ReplaceCompositionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceCompositionResponse, error) {
	rsp, err := c.ReplaceCompositionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceCompositionResponse(rsp)
}

func (c *ClientWithResponses) ReplaceCompositionWithResponse(ctx context.Context, body ReplaceCompositionJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceCompositionResponse, error) {
	rsp, err := c.ReplaceComposition(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceCompositionResponse(rsp)
}

// GetClipByIdWithResponse request returning *GetClipByIdResponse
func (c *ClientWithResponses) GetClipByIdWithResponse(ctx context.Context, clipId int64, reqEditors ...RequestEditorFn) (*GetClipByIdResponse, error) {
	rsp, err := c.GetClipById(ctx, clipId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClipByIdResponse(rsp)
}

// ReplaceClipByIdWithBodyWithResponse request with arbitrary body returning *ReplaceClipByIdResponse
func (c *ClientWithResponses) ReplaceClipByIdWithBodyWithResponse(ctx context.Context, clipId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceClipByIdResponse, error) {
	rsp, err := c.ReplaceClipByIdWithBody(ctx, clipId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceClipByIdResponse(rsp)
}

func (c *ClientWithResponses) ReplaceClipByIdWithResponse(ctx context.Context, clipId int64, body ReplaceClipByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceClipByIdResponse, error) {
	rsp, err := c.ReplaceClipById(ctx, clipId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceClipByIdResponse(rsp)
}

// ClipClearByIdWithResponse request returning *ClipClearByIdResponse
func (c *ClientWithResponses) ClipClearByIdWithResponse(ctx context.Context, clipId int64, reqEditors ...RequestEditorFn) (*ClipClearByIdResponse, error) {
	rsp, err := c.ClipClearById(ctx, clipId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClipClearByIdResponse(rsp)
}

// ClipConnectByIdWithBodyWithResponse request with arbitrary body returning *ClipConnectByIdResponse
func (c *ClientWithResponses) ClipConnectByIdWithBodyWithResponse(ctx context.Context, clipId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ClipConnectByIdResponse, error) {
	rsp, err := c.ClipConnectByIdWithBody(ctx, clipId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClipConnectByIdResponse(rsp)
}

func (c *ClientWithResponses) ClipConnectByIdWithResponse(ctx context.Context, clipId int64, body ClipConnectByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*ClipConnectByIdResponse, error) {
	rsp, err := c.ClipConnectById(ctx, clipId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClipConnectByIdResponse(rsp)
}

// ClipOpenfileByIdWithBodyWithResponse request with arbitrary body returning *ClipOpenfileByIdResponse
func (c *ClientWithResponses) ClipOpenfileByIdWithBodyWithResponse(ctx context.Context, clipId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ClipOpenfileByIdResponse, error) {
	rsp, err := c.ClipOpenfileByIdWithBody(ctx, clipId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClipOpenfileByIdResponse(rsp)
}

// ClipSelectByIdWithResponse request returning *ClipSelectByIdResponse
func (c *ClientWithResponses) ClipSelectByIdWithResponse(ctx context.Context, clipId int64, reqEditors ...RequestEditorFn) (*ClipSelectByIdResponse, error) {
	rsp, err := c.ClipSelectById(ctx, clipId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClipSelectByIdResponse(rsp)
}

// ListClipThumbnailByIdWithResponse request returning *ListClipThumbnailByIdResponse
func (c *ClientWithResponses) ListClipThumbnailByIdWithResponse(ctx context.Context, clipId int64, reqEditors ...RequestEditorFn) (*ListClipThumbnailByIdResponse, error) {
	rsp, err := c.ListClipThumbnailById(ctx, clipId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListClipThumbnailByIdResponse(rsp)
}

// GetClipThumbnailByIdAndTimestampWithResponse request returning *GetClipThumbnailByIdAndTimestampResponse
func (c *ClientWithResponses) GetClipThumbnailByIdAndTimestampWithResponse(ctx context.Context, clipId int64, lastUpdated int64, reqEditors ...RequestEditorFn) (*GetClipThumbnailByIdAndTimestampResponse, error) {
	rsp, err := c.GetClipThumbnailByIdAndTimestamp(ctx, clipId, lastUpdated, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClipThumbnailByIdAndTimestampResponse(rsp)
}

// ResetClipParamByIdWithBodyWithResponse request with arbitrary body returning *ResetClipParamByIdResponse
func (c *ClientWithResponses) ResetClipParamByIdWithBodyWithResponse(ctx context.Context, clipId int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetClipParamByIdResponse, error) {
	rsp, err := c.ResetClipParamByIdWithBody(ctx, clipId, parameter, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetClipParamByIdResponse(rsp)
}

func (c *ClientWithResponses) ResetClipParamByIdWithResponse(ctx context.Context, clipId int64, parameter string, body ResetClipParamByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetClipParamByIdResponse, error) {
	rsp, err := c.ResetClipParamById(ctx, clipId, parameter, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetClipParamByIdResponse(rsp)
}

// GetColumnByIdWithResponse request returning *GetColumnByIdResponse
func (c *ClientWithResponses) GetColumnByIdWithResponse(ctx context.Context, columnId int64, reqEditors ...RequestEditorFn) (*GetColumnByIdResponse, error) {
	rsp, err := c.GetColumnById(ctx, columnId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetColumnByIdResponse(rsp)
}

// ReplaceColumnByIdWithBodyWithResponse request with arbitrary body returning *ReplaceColumnByIdResponse
func (c *ClientWithResponses) ReplaceColumnByIdWithBodyWithResponse(ctx context.Context, columnId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceColumnByIdResponse, error) {
	rsp, err := c.ReplaceColumnByIdWithBody(ctx, columnId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceColumnByIdResponse(rsp)
}

func (c *ClientWithResponses) ReplaceColumnByIdWithResponse(ctx context.Context, columnId int64, body ReplaceColumnByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceColumnByIdResponse, error) {
	rsp, err := c.ReplaceColumnById(ctx, columnId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceColumnByIdResponse(rsp)
}

// ColumnConnectByIdWithBodyWithResponse request with arbitrary body returning *ColumnConnectByIdResponse
func (c *ClientWithResponses) ColumnConnectByIdWithBodyWithResponse(ctx context.Context, columnId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ColumnConnectByIdResponse, error) {
	rsp, err := c.ColumnConnectByIdWithBody(ctx, columnId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseColumnConnectByIdResponse(rsp)
}

func (c *ClientWithResponses) ColumnConnectByIdWithResponse(ctx context.Context, columnId int64, body ColumnConnectByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*ColumnConnectByIdResponse, error) {
	rsp, err := c.ColumnConnectById(ctx, columnId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseColumnConnectByIdResponse(rsp)
}

// ResetColumnParamByIdWithBodyWithResponse request with arbitrary body returning *ResetColumnParamByIdResponse
func (c *ClientWithResponses) ResetColumnParamByIdWithBodyWithResponse(ctx context.Context, columnId int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetColumnParamByIdResponse, error) {
	rsp, err := c.ResetColumnParamByIdWithBody(ctx, columnId, parameter, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetColumnParamByIdResponse(rsp)
}

func (c *ClientWithResponses) ResetColumnParamByIdWithResponse(ctx context.Context, columnId int64, parameter string, body ResetColumnParamByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetColumnParamByIdResponse, error) {
	rsp, err := c.ResetColumnParamById(ctx, columnId, parameter, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetColumnParamByIdResponse(rsp)
}

// GetColumnWithResponse request returning *GetColumnResponse
func (c *ClientWithResponses) GetColumnWithResponse(ctx context.Context, columnIndex int64, reqEditors ...RequestEditorFn) (*GetColumnResponse, error) {
	rsp, err := c.GetColumn(ctx, columnIndex, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetColumnResponse(rsp)
}

// ReplaceColumnWithBodyWithResponse request with arbitrary body returning *ReplaceColumnResponse
func (c *ClientWithResponses) ReplaceColumnWithBodyWithResponse(ctx context.Context, columnIndex int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceColumnResponse, error) {
	rsp, err := c.ReplaceColumnWithBody(ctx, columnIndex, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceColumnResponse(rsp)
}

func (c *ClientWithResponses) ReplaceColumnWithResponse(ctx context.Context, columnIndex int64, body ReplaceColumnJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceColumnResponse, error) {
	rsp, err := c.ReplaceColumn(ctx, columnIndex, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceColumnResponse(rsp)
}

// ColumnConnectWithBodyWithResponse request with arbitrary body returning *ColumnConnectResponse
func (c *ClientWithResponses) ColumnConnectWithBodyWithResponse(ctx context.Context, columnIndex int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ColumnConnectResponse, error) {
	rsp, err := c.ColumnConnectWithBody(ctx, columnIndex, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseColumnConnectResponse(rsp)
}

func (c *ClientWithResponses) ColumnConnectWithResponse(ctx context.Context, columnIndex int64, body ColumnConnectJSONRequestBody, reqEditors ...RequestEditorFn) (*ColumnConnectResponse, error) {
	rsp, err := c.ColumnConnect(ctx, columnIndex, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseColumnConnectResponse(rsp)
}

// ResetColumnParamWithBodyWithResponse request with arbitrary body returning *ResetColumnParamResponse
func (c *ClientWithResponses) ResetColumnParamWithBodyWithResponse(ctx context.Context, columnIndex int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetColumnParamResponse, error) {
	rsp, err := c.ResetColumnParamWithBody(ctx, columnIndex, parameter, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetColumnParamResponse(rsp)
}

func (c *ClientWithResponses) ResetColumnParamWithResponse(ctx context.Context, columnIndex int64, parameter string, body ResetColumnParamJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetColumnParamResponse, error) {
	rsp, err := c.ResetColumnParam(ctx, columnIndex, parameter, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetColumnParamResponse(rsp)
}

// GetDeckByIdWithResponse request returning *GetDeckByIdResponse
func (c *ClientWithResponses) GetDeckByIdWithResponse(ctx context.Context, deckId int64, reqEditors ...RequestEditorFn) (*GetDeckByIdResponse, error) {
	rsp, err := c.GetDeckById(ctx, deckId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeckByIdResponse(rsp)
}

// ReplaceDeckByIdWithBodyWithResponse request with arbitrary body returning *ReplaceDeckByIdResponse
func (c *ClientWithResponses) ReplaceDeckByIdWithBodyWithResponse(ctx context.Context, deckId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceDeckByIdResponse, error) {
	rsp, err := c.ReplaceDeckByIdWithBody(ctx, deckId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceDeckByIdResponse(rsp)
}

func (c *ClientWithResponses) ReplaceDeckByIdWithResponse(ctx context.Context, deckId int64, body ReplaceDeckByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceDeckByIdResponse, error) {
	rsp, err := c.ReplaceDeckById(ctx, deckId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceDeckByIdResponse(rsp)
}

// DeckSelectByIdWithResponse request returning *DeckSelectByIdResponse
func (c *ClientWithResponses) DeckSelectByIdWithResponse(ctx context.Context, deckId int64, reqEditors ...RequestEditorFn) (*DeckSelectByIdResponse, error) {
	rsp, err := c.DeckSelectById(ctx, deckId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeckSelectByIdResponse(rsp)
}

// ResetDeckParamByIdWithBodyWithResponse request with arbitrary body returning *ResetDeckParamByIdResponse
func (c *ClientWithResponses) ResetDeckParamByIdWithBodyWithResponse(ctx context.Context, deckId int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetDeckParamByIdResponse, error) {
	rsp, err := c.ResetDeckParamByIdWithBody(ctx, deckId, parameter, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetDeckParamByIdResponse(rsp)
}

func (c *ClientWithResponses) ResetDeckParamByIdWithResponse(ctx context.Context, deckId int64, parameter string, body ResetDeckParamByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetDeckParamByIdResponse, error) {
	rsp, err := c.ResetDeckParamById(ctx, deckId, parameter, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetDeckParamByIdResponse(rsp)
}

// GetDeckWithResponse request returning *GetDeckResponse
func (c *ClientWithResponses) GetDeckWithResponse(ctx context.Context, deckIndex int64, reqEditors ...RequestEditorFn) (*GetDeckResponse, error) {
	rsp, err := c.GetDeck(ctx, deckIndex, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeckResponse(rsp)
}

// ReplaceDeckWithBodyWithResponse request with arbitrary body returning *ReplaceDeckResponse
func (c *ClientWithResponses) ReplaceDeckWithBodyWithResponse(ctx context.Context, deckIndex int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceDeckResponse, error) {
	rsp, err := c.ReplaceDeckWithBody(ctx, deckIndex, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceDeckResponse(rsp)
}

func (c *ClientWithResponses) ReplaceDeckWithResponse(ctx context.Context, deckIndex int64, body ReplaceDeckJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceDeckResponse, error) {
	rsp, err := c.ReplaceDeck(ctx, deckIndex, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceDeckResponse(rsp)
}

// DeckSelectWithResponse request returning *DeckSelectResponse
func (c *ClientWithResponses) DeckSelectWithResponse(ctx context.Context, deckIndex int64, reqEditors ...RequestEditorFn) (*DeckSelectResponse, error) {
	rsp, err := c.DeckSelect(ctx, deckIndex, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeckSelectResponse(rsp)
}

// ResetDeckParamWithBodyWithResponse request with arbitrary body returning *ResetDeckParamResponse
func (c *ClientWithResponses) ResetDeckParamWithBodyWithResponse(ctx context.Context, deckIndex int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetDeckParamResponse, error) {
	rsp, err := c.ResetDeckParamWithBody(ctx, deckIndex, parameter, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetDeckParamResponse(rsp)
}

func (c *ClientWithResponses) ResetDeckParamWithResponse(ctx context.Context, deckIndex int64, parameter string, body ResetDeckParamJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetDeckParamResponse, error) {
	rsp, err := c.ResetDeckParam(ctx, deckIndex, parameter, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetDeckParamResponse(rsp)
}

// GetEffectByIdWithResponse request returning *GetEffectByIdResponse
func (c *ClientWithResponses) GetEffectByIdWithResponse(ctx context.Context, effectId int64, reqEditors ...RequestEditorFn) (*GetEffectByIdResponse, error) {
	rsp, err := c.GetEffectById(ctx, effectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEffectByIdResponse(rsp)
}

// ReplaceEffectByIdWithBodyWithResponse request with arbitrary body returning *ReplaceEffectByIdResponse
func (c *ClientWithResponses) ReplaceEffectByIdWithBodyWithResponse(ctx context.Context, effectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceEffectByIdResponse, error) {
	rsp, err := c.ReplaceEffectByIdWithBody(ctx, effectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceEffectByIdResponse(rsp)
}

func (c *ClientWithResponses) ReplaceEffectByIdWithResponse(ctx context.Context, effectId int64, body ReplaceEffectByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceEffectByIdResponse, error) {
	rsp, err := c.ReplaceEffectById(ctx, effectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceEffectByIdResponse(rsp)
}

// GetLayergroupByIdWithResponse request returning *GetLayergroupByIdResponse
func (c *ClientWithResponses) GetLayergroupByIdWithResponse(ctx context.Context, layergroupId int64, reqEditors ...RequestEditorFn) (*GetLayergroupByIdResponse, error) {
	rsp, err := c.GetLayergroupById(ctx, layergroupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLayergroupByIdResponse(rsp)
}

// ReplaceLayergroupByIdWithBodyWithResponse request with arbitrary body returning *ReplaceLayergroupByIdResponse
func (c *ClientWithResponses) ReplaceLayergroupByIdWithBodyWithResponse(ctx context.Context, layergroupId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceLayergroupByIdResponse, error) {
	rsp, err := c.ReplaceLayergroupByIdWithBody(ctx, layergroupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceLayergroupByIdResponse(rsp)
}

func (c *ClientWithResponses) ReplaceLayergroupByIdWithResponse(ctx context.Context, layergroupId int64, body ReplaceLayergroupByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceLayergroupByIdResponse, error) {
	rsp, err := c.ReplaceLayergroupById(ctx, layergroupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceLayergroupByIdResponse(rsp)
}

// LayergroupSelectByIdWithResponse request returning *LayergroupSelectByIdResponse
func (c *ClientWithResponses) LayergroupSelectByIdWithResponse(ctx context.Context, layergroupId int64, reqEditors ...RequestEditorFn) (*LayergroupSelectByIdResponse, error) {
	rsp, err := c.LayergroupSelectById(ctx, layergroupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLayergroupSelectByIdResponse(rsp)
}

// ResetLayerGroupParamByIdWithBodyWithResponse request with arbitrary body returning *ResetLayerGroupParamByIdResponse
func (c *ClientWithResponses) ResetLayerGroupParamByIdWithBodyWithResponse(ctx context.Context, layergroupId int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetLayerGroupParamByIdResponse, error) {
	rsp, err := c.ResetLayerGroupParamByIdWithBody(ctx, layergroupId, parameter, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetLayerGroupParamByIdResponse(rsp)
}

func (c *ClientWithResponses) ResetLayerGroupParamByIdWithResponse(ctx context.Context, layergroupId int64, parameter string, body ResetLayerGroupParamByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetLayerGroupParamByIdResponse, error) {
	rsp, err := c.ResetLayerGroupParamById(ctx, layergroupId, parameter, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetLayerGroupParamByIdResponse(rsp)
}

// GetLayergroupWithResponse request returning *GetLayergroupResponse
func (c *ClientWithResponses) GetLayergroupWithResponse(ctx context.Context, layergroupIndex int64, reqEditors ...RequestEditorFn) (*GetLayergroupResponse, error) {
	rsp, err := c.GetLayergroup(ctx, layergroupIndex, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLayergroupResponse(rsp)
}

// ReplaceLayergroupWithBodyWithResponse request with arbitrary body returning *ReplaceLayergroupResponse
func (c *ClientWithResponses) ReplaceLayergroupWithBodyWithResponse(ctx context.Context, layergroupIndex int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceLayergroupResponse, error) {
	rsp, err := c.ReplaceLayergroupWithBody(ctx, layergroupIndex, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceLayergroupResponse(rsp)
}

func (c *ClientWithResponses) ReplaceLayergroupWithResponse(ctx context.Context, layergroupIndex int64, body ReplaceLayergroupJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceLayergroupResponse, error) {
	rsp, err := c.ReplaceLayergroup(ctx, layergroupIndex, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceLayergroupResponse(rsp)
}

// ResetLayerGroupParamWithBodyWithResponse request with arbitrary body returning *ResetLayerGroupParamResponse
func (c *ClientWithResponses) ResetLayerGroupParamWithBodyWithResponse(ctx context.Context, layergroupIndex int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetLayerGroupParamResponse, error) {
	rsp, err := c.ResetLayerGroupParamWithBody(ctx, layergroupIndex, parameter, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetLayerGroupParamResponse(rsp)
}

func (c *ClientWithResponses) ResetLayerGroupParamWithResponse(ctx context.Context, layergroupIndex int64, parameter string, body ResetLayerGroupParamJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetLayerGroupParamResponse, error) {
	rsp, err := c.ResetLayerGroupParam(ctx, layergroupIndex, parameter, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetLayerGroupParamResponse(rsp)
}

// LayergroupSelectWithResponse request returning *LayergroupSelectResponse
func (c *ClientWithResponses) LayergroupSelectWithResponse(ctx context.Context, layergroupIndex int64, reqEditors ...RequestEditorFn) (*LayergroupSelectResponse, error) {
	rsp, err := c.LayergroupSelect(ctx, layergroupIndex, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLayergroupSelectResponse(rsp)
}

// GetLayerByIdWithResponse request returning *GetLayerByIdResponse
func (c *ClientWithResponses) GetLayerByIdWithResponse(ctx context.Context, layerId int64, reqEditors ...RequestEditorFn) (*GetLayerByIdResponse, error) {
	rsp, err := c.GetLayerById(ctx, layerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLayerByIdResponse(rsp)
}

// ReplaceLayerByIdWithBodyWithResponse request with arbitrary body returning *ReplaceLayerByIdResponse
func (c *ClientWithResponses) ReplaceLayerByIdWithBodyWithResponse(ctx context.Context, layerId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceLayerByIdResponse, error) {
	rsp, err := c.ReplaceLayerByIdWithBody(ctx, layerId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceLayerByIdResponse(rsp)
}

func (c *ClientWithResponses) ReplaceLayerByIdWithResponse(ctx context.Context, layerId int64, body ReplaceLayerByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceLayerByIdResponse, error) {
	rsp, err := c.ReplaceLayerById(ctx, layerId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceLayerByIdResponse(rsp)
}

// LayerClearByIdWithResponse request returning *LayerClearByIdResponse
func (c *ClientWithResponses) LayerClearByIdWithResponse(ctx context.Context, layerId int64, reqEditors ...RequestEditorFn) (*LayerClearByIdResponse, error) {
	rsp, err := c.LayerClearById(ctx, layerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLayerClearByIdResponse(rsp)
}

// LayerClearClipsByIdWithResponse request returning *LayerClearClipsByIdResponse
func (c *ClientWithResponses) LayerClearClipsByIdWithResponse(ctx context.Context, layerId int64, reqEditors ...RequestEditorFn) (*LayerClearClipsByIdResponse, error) {
	rsp, err := c.LayerClearClipsById(ctx, layerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLayerClearClipsByIdResponse(rsp)
}

// LayerSelectByIdWithResponse request returning *LayerSelectByIdResponse
func (c *ClientWithResponses) LayerSelectByIdWithResponse(ctx context.Context, layerId int64, reqEditors ...RequestEditorFn) (*LayerSelectByIdResponse, error) {
	rsp, err := c.LayerSelectById(ctx, layerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLayerSelectByIdResponse(rsp)
}

// ResetLayerParamByIdWithBodyWithResponse request with arbitrary body returning *ResetLayerParamByIdResponse
func (c *ClientWithResponses) ResetLayerParamByIdWithBodyWithResponse(ctx context.Context, layerId int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetLayerParamByIdResponse, error) {
	rsp, err := c.ResetLayerParamByIdWithBody(ctx, layerId, parameter, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetLayerParamByIdResponse(rsp)
}

func (c *ClientWithResponses) ResetLayerParamByIdWithResponse(ctx context.Context, layerId int64, parameter string, body ResetLayerParamByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetLayerParamByIdResponse, error) {
	rsp, err := c.ResetLayerParamById(ctx, layerId, parameter, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetLayerParamByIdResponse(rsp)
}

// GetLayerWithResponse request returning *GetLayerResponse
func (c *ClientWithResponses) GetLayerWithResponse(ctx context.Context, layerIndex int64, reqEditors ...RequestEditorFn) (*GetLayerResponse, error) {
	rsp, err := c.GetLayer(ctx, layerIndex, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLayerResponse(rsp)
}

// ReplaceLayerWithBodyWithResponse request with arbitrary body returning *ReplaceLayerResponse
func (c *ClientWithResponses) ReplaceLayerWithBodyWithResponse(ctx context.Context, layerIndex int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceLayerResponse, error) {
	rsp, err := c.ReplaceLayerWithBody(ctx, layerIndex, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceLayerResponse(rsp)
}

func (c *ClientWithResponses) ReplaceLayerWithResponse(ctx context.Context, layerIndex int64, body ReplaceLayerJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceLayerResponse, error) {
	rsp, err := c.ReplaceLayer(ctx, layerIndex, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceLayerResponse(rsp)
}

// LayerClearWithResponse request returning *LayerClearResponse
func (c *ClientWithResponses) LayerClearWithResponse(ctx context.Context, layerIndex int64, reqEditors ...RequestEditorFn) (*LayerClearResponse, error) {
	rsp, err := c.LayerClear(ctx, layerIndex, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLayerClearResponse(rsp)
}

// LayerClearClipsWithResponse request returning *LayerClearClipsResponse
func (c *ClientWithResponses) LayerClearClipsWithResponse(ctx context.Context, layerIndex int64, reqEditors ...RequestEditorFn) (*LayerClearClipsResponse, error) {
	rsp, err := c.LayerClearClips(ctx, layerIndex, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLayerClearClipsResponse(rsp)
}

// GetClipByPositionWithResponse request returning *GetClipByPositionResponse
func (c *ClientWithResponses) GetClipByPositionWithResponse(ctx context.Context, layerIndex int64, clipIndex int64, reqEditors ...RequestEditorFn) (*GetClipByPositionResponse, error) {
	rsp, err := c.GetClipByPosition(ctx, layerIndex, clipIndex, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClipByPositionResponse(rsp)
}

// ReplaceClipByPositionWithBodyWithResponse request with arbitrary body returning *ReplaceClipByPositionResponse
func (c *ClientWithResponses) ReplaceClipByPositionWithBodyWithResponse(ctx context.Context, layerIndex int64, clipIndex int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceClipByPositionResponse, error) {
	rsp, err := c.ReplaceClipByPositionWithBody(ctx, layerIndex, clipIndex, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceClipByPositionResponse(rsp)
}

func (c *ClientWithResponses) ReplaceClipByPositionWithResponse(ctx context.Context, layerIndex int64, clipIndex int64, body ReplaceClipByPositionJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceClipByPositionResponse, error) {
	rsp, err := c.ReplaceClipByPosition(ctx, layerIndex, clipIndex, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceClipByPositionResponse(rsp)
}

// ClipClearWithResponse request returning *ClipClearResponse
func (c *ClientWithResponses) ClipClearWithResponse(ctx context.Context, layerIndex int64, clipIndex int64, reqEditors ...RequestEditorFn) (*ClipClearResponse, error) {
	rsp, err := c.ClipClear(ctx, layerIndex, clipIndex, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClipClearResponse(rsp)
}

// ClipConnectWithBodyWithResponse request with arbitrary body returning *ClipConnectResponse
func (c *ClientWithResponses) ClipConnectWithBodyWithResponse(ctx context.Context, layerIndex int64, clipIndex int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ClipConnectResponse, error) {
	rsp, err := c.ClipConnectWithBody(ctx, layerIndex, clipIndex, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClipConnectResponse(rsp)
}

func (c *ClientWithResponses) ClipConnectWithResponse(ctx context.Context, layerIndex int64, clipIndex int64, body ClipConnectJSONRequestBody, reqEditors ...RequestEditorFn) (*ClipConnectResponse, error) {
	rsp, err := c.ClipConnect(ctx, layerIndex, clipIndex, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClipConnectResponse(rsp)
}

// ClipOpenfileWithBodyWithResponse request with arbitrary body returning *ClipOpenfileResponse
func (c *ClientWithResponses) ClipOpenfileWithBodyWithResponse(ctx context.Context, layerIndex int64, clipIndex int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ClipOpenfileResponse, error) {
	rsp, err := c.ClipOpenfileWithBody(ctx, layerIndex, clipIndex, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClipOpenfileResponse(rsp)
}

// ClipSelectWithResponse request returning *ClipSelectResponse
func (c *ClientWithResponses) ClipSelectWithResponse(ctx context.Context, layerIndex int64, clipIndex int64, reqEditors ...RequestEditorFn) (*ClipSelectResponse, error) {
	rsp, err := c.ClipSelect(ctx, layerIndex, clipIndex, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClipSelectResponse(rsp)
}

// ListClipThumbnailByPositionWithResponse request returning *ListClipThumbnailByPositionResponse
func (c *ClientWithResponses) ListClipThumbnailByPositionWithResponse(ctx context.Context, layerIndex int64, clipIndex int64, reqEditors ...RequestEditorFn) (*ListClipThumbnailByPositionResponse, error) {
	rsp, err := c.ListClipThumbnailByPosition(ctx, layerIndex, clipIndex, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListClipThumbnailByPositionResponse(rsp)
}

// GetClipThumbnailByPositionAndTimestampWithResponse request returning *GetClipThumbnailByPositionAndTimestampResponse
func (c *ClientWithResponses) GetClipThumbnailByPositionAndTimestampWithResponse(ctx context.Context, layerIndex int64, clipIndex int64, lastUpdated int64, reqEditors ...RequestEditorFn) (*GetClipThumbnailByPositionAndTimestampResponse, error) {
	rsp, err := c.GetClipThumbnailByPositionAndTimestamp(ctx, layerIndex, clipIndex, lastUpdated, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClipThumbnailByPositionAndTimestampResponse(rsp)
}

// ResetClipParamWithBodyWithResponse request with arbitrary body returning *ResetClipParamResponse
func (c *ClientWithResponses) ResetClipParamWithBodyWithResponse(ctx context.Context, layerIndex int64, clipIndex int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetClipParamResponse, error) {
	rsp, err := c.ResetClipParamWithBody(ctx, layerIndex, clipIndex, parameter, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetClipParamResponse(rsp)
}

func (c *ClientWithResponses) ResetClipParamWithResponse(ctx context.Context, layerIndex int64, clipIndex int64, parameter string, body ResetClipParamJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetClipParamResponse, error) {
	rsp, err := c.ResetClipParam(ctx, layerIndex, clipIndex, parameter, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetClipParamResponse(rsp)
}

// LayerSelectWithResponse request returning *LayerSelectResponse
func (c *ClientWithResponses) LayerSelectWithResponse(ctx context.Context, layerIndex int64, reqEditors ...RequestEditorFn) (*LayerSelectResponse, error) {
	rsp, err := c.LayerSelect(ctx, layerIndex, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLayerSelectResponse(rsp)
}

// ResetLayerParamWithBodyWithResponse request with arbitrary body returning *ResetLayerParamResponse
func (c *ClientWithResponses) ResetLayerParamWithBodyWithResponse(ctx context.Context, layerIndex int64, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetLayerParamResponse, error) {
	rsp, err := c.ResetLayerParamWithBody(ctx, layerIndex, parameter, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetLayerParamResponse(rsp)
}

func (c *ClientWithResponses) ResetLayerParamWithResponse(ctx context.Context, layerIndex int64, parameter string, body ResetLayerParamJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetLayerParamResponse, error) {
	rsp, err := c.ResetLayerParam(ctx, layerIndex, parameter, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetLayerParamResponse(rsp)
}

// ListDummyThumbnailWithResponse request returning *ListDummyThumbnailResponse
func (c *ClientWithResponses) ListDummyThumbnailWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListDummyThumbnailResponse, error) {
	rsp, err := c.ListDummyThumbnail(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDummyThumbnailResponse(rsp)
}

// ResetCompositionParamWithBodyWithResponse request with arbitrary body returning *ResetCompositionParamResponse
func (c *ClientWithResponses) ResetCompositionParamWithBodyWithResponse(ctx context.Context, parameter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetCompositionParamResponse, error) {
	rsp, err := c.ResetCompositionParamWithBody(ctx, parameter, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetCompositionParamResponse(rsp)
}

func (c *ClientWithResponses) ResetCompositionParamWithResponse(ctx context.Context, parameter string, body ResetCompositionParamJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetCompositionParamResponse, error) {
	rsp, err := c.ResetCompositionParam(ctx, parameter, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetCompositionParamResponse(rsp)
}

// GetProductWithResponse request returning *GetProductResponse
func (c *ClientWithResponses) GetProductWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProductResponse, error) {
	rsp, err := c.GetProduct(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductResponse(rsp)
}

// ParseListCompositionResponse parses an HTTP response from a ListCompositionWithResponse call
func ParseListCompositionResponse(rsp *http.Response) (*ListCompositionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCompositionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Composition
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplaceCompositionResponse parses an HTTP response from a ReplaceCompositionWithResponse call
func ParseReplaceCompositionResponse(rsp *http.Response) (*ReplaceCompositionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceCompositionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClipByIdResponse parses an HTTP response from a GetClipByIdWithResponse call
func ParseGetClipByIdResponse(rsp *http.Response) (*GetClipByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClipByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Clip
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplaceClipByIdResponse parses an HTTP response from a ReplaceClipByIdWithResponse call
func ParseReplaceClipByIdResponse(rsp *http.Response) (*ReplaceClipByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceClipByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseClipClearByIdResponse parses an HTTP response from a ClipClearByIdWithResponse call
func ParseClipClearByIdResponse(rsp *http.Response) (*ClipClearByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClipClearByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseClipConnectByIdResponse parses an HTTP response from a ClipConnectByIdWithResponse call
func ParseClipConnectByIdResponse(rsp *http.Response) (*ClipConnectByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClipConnectByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseClipOpenfileByIdResponse parses an HTTP response from a ClipOpenfileByIdWithResponse call
func ParseClipOpenfileByIdResponse(rsp *http.Response) (*ClipOpenfileByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClipOpenfileByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseClipSelectByIdResponse parses an HTTP response from a ClipSelectByIdWithResponse call
func ParseClipSelectByIdResponse(rsp *http.Response) (*ClipSelectByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClipSelectByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListClipThumbnailByIdResponse parses an HTTP response from a ListClipThumbnailByIdWithResponse call
func ParseListClipThumbnailByIdResponse(rsp *http.Response) (*ListClipThumbnailByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListClipThumbnailByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClipThumbnailByIdAndTimestampResponse parses an HTTP response from a GetClipThumbnailByIdAndTimestampWithResponse call
func ParseGetClipThumbnailByIdAndTimestampResponse(rsp *http.Response) (*GetClipThumbnailByIdAndTimestampResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClipThumbnailByIdAndTimestampResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResetClipParamByIdResponse parses an HTTP response from a ResetClipParamByIdWithResponse call
func ParseResetClipParamByIdResponse(rsp *http.Response) (*ResetClipParamByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResetClipParamByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetColumnByIdResponse parses an HTTP response from a GetColumnByIdWithResponse call
func ParseGetColumnByIdResponse(rsp *http.Response) (*GetColumnByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetColumnByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Column
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplaceColumnByIdResponse parses an HTTP response from a ReplaceColumnByIdWithResponse call
func ParseReplaceColumnByIdResponse(rsp *http.Response) (*ReplaceColumnByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceColumnByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseColumnConnectByIdResponse parses an HTTP response from a ColumnConnectByIdWithResponse call
func ParseColumnConnectByIdResponse(rsp *http.Response) (*ColumnConnectByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ColumnConnectByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResetColumnParamByIdResponse parses an HTTP response from a ResetColumnParamByIdWithResponse call
func ParseResetColumnParamByIdResponse(rsp *http.Response) (*ResetColumnParamByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResetColumnParamByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetColumnResponse parses an HTTP response from a GetColumnWithResponse call
func ParseGetColumnResponse(rsp *http.Response) (*GetColumnResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetColumnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Column
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplaceColumnResponse parses an HTTP response from a ReplaceColumnWithResponse call
func ParseReplaceColumnResponse(rsp *http.Response) (*ReplaceColumnResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceColumnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseColumnConnectResponse parses an HTTP response from a ColumnConnectWithResponse call
func ParseColumnConnectResponse(rsp *http.Response) (*ColumnConnectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ColumnConnectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResetColumnParamResponse parses an HTTP response from a ResetColumnParamWithResponse call
func ParseResetColumnParamResponse(rsp *http.Response) (*ResetColumnParamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResetColumnParamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDeckByIdResponse parses an HTTP response from a GetDeckByIdWithResponse call
func ParseGetDeckByIdResponse(rsp *http.Response) (*GetDeckByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeckByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Deck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplaceDeckByIdResponse parses an HTTP response from a ReplaceDeckByIdWithResponse call
func ParseReplaceDeckByIdResponse(rsp *http.Response) (*ReplaceDeckByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceDeckByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeckSelectByIdResponse parses an HTTP response from a DeckSelectByIdWithResponse call
func ParseDeckSelectByIdResponse(rsp *http.Response) (*DeckSelectByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeckSelectByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResetDeckParamByIdResponse parses an HTTP response from a ResetDeckParamByIdWithResponse call
func ParseResetDeckParamByIdResponse(rsp *http.Response) (*ResetDeckParamByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResetDeckParamByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDeckResponse parses an HTTP response from a GetDeckWithResponse call
func ParseGetDeckResponse(rsp *http.Response) (*GetDeckResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Deck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplaceDeckResponse parses an HTTP response from a ReplaceDeckWithResponse call
func ParseReplaceDeckResponse(rsp *http.Response) (*ReplaceDeckResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceDeckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeckSelectResponse parses an HTTP response from a DeckSelectWithResponse call
func ParseDeckSelectResponse(rsp *http.Response) (*DeckSelectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeckSelectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResetDeckParamResponse parses an HTTP response from a ResetDeckParamWithResponse call
func ParseResetDeckParamResponse(rsp *http.Response) (*ResetDeckParamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResetDeckParamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEffectByIdResponse parses an HTTP response from a GetEffectByIdWithResponse call
func ParseGetEffectByIdResponse(rsp *http.Response) (*GetEffectByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEffectByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplaceEffectByIdResponse parses an HTTP response from a ReplaceEffectByIdWithResponse call
func ParseReplaceEffectByIdResponse(rsp *http.Response) (*ReplaceEffectByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceEffectByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLayergroupByIdResponse parses an HTTP response from a GetLayergroupByIdWithResponse call
func ParseGetLayergroupByIdResponse(rsp *http.Response) (*GetLayergroupByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLayergroupByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LayerGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplaceLayergroupByIdResponse parses an HTTP response from a ReplaceLayergroupByIdWithResponse call
func ParseReplaceLayergroupByIdResponse(rsp *http.Response) (*ReplaceLayergroupByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceLayergroupByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLayergroupSelectByIdResponse parses an HTTP response from a LayergroupSelectByIdWithResponse call
func ParseLayergroupSelectByIdResponse(rsp *http.Response) (*LayergroupSelectByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LayergroupSelectByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResetLayerGroupParamByIdResponse parses an HTTP response from a ResetLayerGroupParamByIdWithResponse call
func ParseResetLayerGroupParamByIdResponse(rsp *http.Response) (*ResetLayerGroupParamByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResetLayerGroupParamByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLayergroupResponse parses an HTTP response from a GetLayergroupWithResponse call
func ParseGetLayergroupResponse(rsp *http.Response) (*GetLayergroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLayergroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LayerGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplaceLayergroupResponse parses an HTTP response from a ReplaceLayergroupWithResponse call
func ParseReplaceLayergroupResponse(rsp *http.Response) (*ReplaceLayergroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceLayergroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResetLayerGroupParamResponse parses an HTTP response from a ResetLayerGroupParamWithResponse call
func ParseResetLayerGroupParamResponse(rsp *http.Response) (*ResetLayerGroupParamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResetLayerGroupParamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLayergroupSelectResponse parses an HTTP response from a LayergroupSelectWithResponse call
func ParseLayergroupSelectResponse(rsp *http.Response) (*LayergroupSelectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LayergroupSelectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLayerByIdResponse parses an HTTP response from a GetLayerByIdWithResponse call
func ParseGetLayerByIdResponse(rsp *http.Response) (*GetLayerByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLayerByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Layer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplaceLayerByIdResponse parses an HTTP response from a ReplaceLayerByIdWithResponse call
func ParseReplaceLayerByIdResponse(rsp *http.Response) (*ReplaceLayerByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceLayerByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLayerClearByIdResponse parses an HTTP response from a LayerClearByIdWithResponse call
func ParseLayerClearByIdResponse(rsp *http.Response) (*LayerClearByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LayerClearByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLayerClearClipsByIdResponse parses an HTTP response from a LayerClearClipsByIdWithResponse call
func ParseLayerClearClipsByIdResponse(rsp *http.Response) (*LayerClearClipsByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LayerClearClipsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLayerSelectByIdResponse parses an HTTP response from a LayerSelectByIdWithResponse call
func ParseLayerSelectByIdResponse(rsp *http.Response) (*LayerSelectByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LayerSelectByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResetLayerParamByIdResponse parses an HTTP response from a ResetLayerParamByIdWithResponse call
func ParseResetLayerParamByIdResponse(rsp *http.Response) (*ResetLayerParamByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResetLayerParamByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLayerResponse parses an HTTP response from a GetLayerWithResponse call
func ParseGetLayerResponse(rsp *http.Response) (*GetLayerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLayerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Layer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplaceLayerResponse parses an HTTP response from a ReplaceLayerWithResponse call
func ParseReplaceLayerResponse(rsp *http.Response) (*ReplaceLayerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceLayerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLayerClearResponse parses an HTTP response from a LayerClearWithResponse call
func ParseLayerClearResponse(rsp *http.Response) (*LayerClearResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LayerClearResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLayerClearClipsResponse parses an HTTP response from a LayerClearClipsWithResponse call
func ParseLayerClearClipsResponse(rsp *http.Response) (*LayerClearClipsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LayerClearClipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClipByPositionResponse parses an HTTP response from a GetClipByPositionWithResponse call
func ParseGetClipByPositionResponse(rsp *http.Response) (*GetClipByPositionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClipByPositionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Clip
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplaceClipByPositionResponse parses an HTTP response from a ReplaceClipByPositionWithResponse call
func ParseReplaceClipByPositionResponse(rsp *http.Response) (*ReplaceClipByPositionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceClipByPositionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseClipClearResponse parses an HTTP response from a ClipClearWithResponse call
func ParseClipClearResponse(rsp *http.Response) (*ClipClearResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClipClearResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseClipConnectResponse parses an HTTP response from a ClipConnectWithResponse call
func ParseClipConnectResponse(rsp *http.Response) (*ClipConnectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClipConnectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseClipOpenfileResponse parses an HTTP response from a ClipOpenfileWithResponse call
func ParseClipOpenfileResponse(rsp *http.Response) (*ClipOpenfileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClipOpenfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseClipSelectResponse parses an HTTP response from a ClipSelectWithResponse call
func ParseClipSelectResponse(rsp *http.Response) (*ClipSelectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClipSelectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListClipThumbnailByPositionResponse parses an HTTP response from a ListClipThumbnailByPositionWithResponse call
func ParseListClipThumbnailByPositionResponse(rsp *http.Response) (*ListClipThumbnailByPositionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListClipThumbnailByPositionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClipThumbnailByPositionAndTimestampResponse parses an HTTP response from a GetClipThumbnailByPositionAndTimestampWithResponse call
func ParseGetClipThumbnailByPositionAndTimestampResponse(rsp *http.Response) (*GetClipThumbnailByPositionAndTimestampResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClipThumbnailByPositionAndTimestampResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResetClipParamResponse parses an HTTP response from a ResetClipParamWithResponse call
func ParseResetClipParamResponse(rsp *http.Response) (*ResetClipParamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResetClipParamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLayerSelectResponse parses an HTTP response from a LayerSelectWithResponse call
func ParseLayerSelectResponse(rsp *http.Response) (*LayerSelectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LayerSelectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResetLayerParamResponse parses an HTTP response from a ResetLayerParamWithResponse call
func ParseResetLayerParamResponse(rsp *http.Response) (*ResetLayerParamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResetLayerParamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListDummyThumbnailResponse parses an HTTP response from a ListDummyThumbnailWithResponse call
func ParseListDummyThumbnailResponse(rsp *http.Response) (*ListDummyThumbnailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDummyThumbnailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResetCompositionParamResponse parses an HTTP response from a ResetCompositionParamWithResponse call
func ParseResetCompositionParamResponse(rsp *http.Response) (*ResetCompositionParamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResetCompositionParamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetProductResponse parses an HTTP response from a GetProductWithResponse call
func ParseGetProductResponse(rsp *http.Response) (*GetProductResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
