// Package internal provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package internal

import (
	"encoding/json"
	"fmt"
)

// Defines values for ParameterViewControlType.
const (
	ParameterViewControlTypeBasedOnParam ParameterViewControlType = "based_on_param"

	ParameterViewControlTypeChoiceButtons ParameterViewControlType = "choice_buttons"

	ParameterViewControlTypeChoiceCombobox ParameterViewControlType = "choice_combobox"

	ParameterViewControlTypeColorPallette ParameterViewControlType = "color_pallette"

	ParameterViewControlTypeColorPicker ParameterViewControlType = "color_picker"

	ParameterViewControlTypeDurationSpinner ParameterViewControlType = "duration_spinner"

	ParameterViewControlTypeRotary ParameterViewControlType = "rotary"

	ParameterViewControlTypeSlider ParameterViewControlType = "slider"

	ParameterViewControlTypeSliderColorAlpha ParameterViewControlType = "slider_color_alpha"

	ParameterViewControlTypeSliderColorBlue ParameterViewControlType = "slider_color_blue"

	ParameterViewControlTypeSliderColorBrightness ParameterViewControlType = "slider_color_brightness"

	ParameterViewControlTypeSliderColorGreen ParameterViewControlType = "slider_color_green"

	ParameterViewControlTypeSliderColorHue ParameterViewControlType = "slider_color_hue"

	ParameterViewControlTypeSliderColorOpacity ParameterViewControlType = "slider_color_opacity"

	ParameterViewControlTypeSliderColorRed ParameterViewControlType = "slider_color_red"

	ParameterViewControlTypeSliderColorSaturation ParameterViewControlType = "slider_color_saturation"

	ParameterViewControlTypeSpinner ParameterViewControlType = "spinner"

	ParameterViewControlTypeText ParameterViewControlType = "text"

	ParameterViewControlTypeTextMultiline ParameterViewControlType = "text_multiline"
)

// Defines values for ParameterViewDisplayUnits.
const (
	ParameterViewDisplayUnitsBeats ParameterViewDisplayUnits = "beats"

	ParameterViewDisplayUnitsDecibels ParameterViewDisplayUnits = "decibels"

	ParameterViewDisplayUnitsDegrees ParameterViewDisplayUnits = "degrees"

	ParameterViewDisplayUnitsFractions ParameterViewDisplayUnits = "fractions"

	ParameterViewDisplayUnitsFramesPerSecond ParameterViewDisplayUnits = "frames_per_second"

	ParameterViewDisplayUnitsInteger ParameterViewDisplayUnits = "integer"

	ParameterViewDisplayUnitsMilliseconds ParameterViewDisplayUnits = "milliseconds"

	ParameterViewDisplayUnitsPercent ParameterViewDisplayUnits = "percent"

	ParameterViewDisplayUnitsReal ParameterViewDisplayUnits = "real"

	ParameterViewDisplayUnitsSeconds ParameterViewDisplayUnits = "seconds"
)

// An audioeffect represents a single effect in a chain of effects to be applied to a source. Properties on the audioeffect control how and what is rendered in the effect.
type AudioEffect struct {
	// A parameter containing a true or false value
	Bypassed *BooleanParameter `json:"bypassed,omitempty"`

	// The unique id of the audio effect instance
	Id *int64 `json:"id,omitempty"`

	// The name of the effect
	Name *string `json:"name,omitempty"`

	// An unstructured collection of parameters. Parameters are presented as a map where the key is the name of the parameter and the value is the parameter itself. Parameters may be any valid parameter type.
	Params *ParameterCollection `json:"params,omitempty"`
}

// Meta information for an audio file
type AudioFileInfo struct {
	// Bpm rate expressed in beats
	Bpm *float64 `json:"bpm,omitempty"`

	// Duration of file expressed as hours:seconds:minutes:milliseconds
	Duration *string `json:"duration,omitempty"`

	// Duration of file expressed as milliseconds
	DurationMs *float64 `json:"duration_ms,omitempty"`

	// Whether file is actully present on disk at the given location
	Exists *bool `json:"exists,omitempty"`

	// Number of audio channels
	NumChannels *int32 `json:"num_channels,omitempty"`

	// The location of the file on disk
	Path *string `json:"path,omitempty"`

	// Sample rate expressed in Hertz
	SampleRate *float64 `json:"sample_rate,omitempty"`
}

// An audio track, as part of a clip,layer,group or a composition
type AudioTrack struct {
	// All the effects that may be applied when the audio track is played
	Effects *[]AudioEffect `json:"effects,omitempty"`

	// A parameter containing a floating-point value with a minimum and maximum allowed value.
	Pan *RangeParameter `json:"pan,omitempty"`

	// A parameter containing a floating-point value with a minimum and maximum allowed value.
	Volume *RangeParameter `json:"volume,omitempty"`
}

// AudioTrackClip defines model for AudioTrackClip.
type AudioTrackClip struct {
	// Embedded struct due to allOf(#/components/schemas/AudioTrack)
	AudioTrack `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// The description of the source belonging to this audio track
	Description *string `json:"description,omitempty"`

	// Meta information for an audio file
	Fileinfo *AudioFileInfo `json:"fileinfo"`
}

// AutoPilot options to control automatic clip transitions
type AutoPilot struct {
	// A multiple-choice parameter
	Target *ChoiceParameter `json:"target,omitempty"`
}

// A parameter containing a true or false value
type BooleanParameter struct {
	// The unique identifier of the parameter
	Id *int64 `json:"id,omitempty"`

	// The value for the parameter
	Value *bool `json:"value,omitempty"`

	// The parameter type. This is "ParamBoolean" for this type
	Valuetype *string `json:"valuetype,omitempty"`

	// Semantic information on the parameter, contains hints about how best to display the parameter
	View *ParameterView `json:"view,omitempty"`
}

// A multiple-choice parameter
type ChoiceParameter struct {
	// The unique identifier of the parameter
	Id *int64 `json:"id,omitempty"`

	// The index of the selected option within the options
	Index *int32 `json:"index,omitempty"`

	// The list of available options for the parameter
	Options *[]string `json:"options,omitempty"`

	// The value of the selected option
	Value *string `json:"value,omitempty"`

	// The parameter type. This is "ParamChoice" for this type
	Valuetype *string `json:"valuetype,omitempty"`

	// Semantic information on the parameter, contains hints about how best to display the parameter
	View *ParameterView `json:"view,omitempty"`
}

// A single clip in the composition, which may contain a video and/or audio track
type Clip struct {
	Audio *AudioTrackClip `json:"audio,omitempty"`

	// A multiple-choice parameter
	Beatsnap *ChoiceParameter `json:"beatsnap,omitempty"`

	// A multiple-choice parameter
	Colorid *ChoiceParameter `json:"colorid,omitempty"`

	// Get whether the clip is currently connected.
	Connected *struct {
		// Embedded struct due to allOf(#/components/schemas/BooleanParameter)
		BooleanParameter `yaml:",inline"`
	} `json:"connected,omitempty"`

	// An unstructured collection of parameters. Parameters are presented as a map where the key is the name of the parameter and the value is the parameter itself. Parameters may be any valid parameter type.
	Dashboard *ParameterCollection `json:"dashboard,omitempty"`

	// A multiple-choice parameter
	Faderstart *ChoiceParameter `json:"faderstart,omitempty"`

	// The unique id of the clip
	Id *int64 `json:"id,omitempty"`

	// A multiple-choice parameter
	Ignorecolumntrigger *ChoiceParameter `json:"ignorecolumntrigger,omitempty"`

	// A parameter containing string data
	Name *StringParameter `json:"name,omitempty"`

	// Get whether the clip is currently selected. If a clip is selected the properties will show up in Arena or Avenue and in the example react application.
	Selected *struct {
		// Embedded struct due to allOf(#/components/schemas/BooleanParameter)
		BooleanParameter `yaml:",inline"`
	} `json:"selected,omitempty"`

	// A multiple-choice parameter
	Target *ChoiceParameter `json:"target,omitempty"`

	// The thumbnail properties contain information with the latest update to the thumbnail, the size (in bytes) and whether it contains the 'default' thumbnail, meaning it doesn't contain a video or audio track
	Thumbnail *struct {
		// Get whether this is a default thumbnail, shared between all clips that don't have any video or audio tracks
		IsDefault *bool `json:"is_default,omitempty"`

		// The timestamp of the last update, in milliseconds. Given as a string to prevent lesser languages from truncating the value
		LastUpdate *string `json:"last_update,omitempty"`

		// The number of bytes of data in the thumbnail
		Size *int64 `json:"size,omitempty"`
	} `json:"thumbnail,omitempty"`

	// Only Timeline and BPM Sync transport types are supported at the moment
	Transport *interface{} `json:"transport,omitempty"`

	// A multiple-choice parameter
	Transporttype *ChoiceParameter `json:"transporttype,omitempty"`

	// A multiple-choice parameter
	Triggerstyle *ChoiceParameter `json:"triggerstyle,omitempty"`
	Video        *VideoTrackClip  `json:"video,omitempty"`
}

// A parameter containing color data
type ColorParameter struct {
	// The unique identifier of the parameter
	Id *int64 `json:"id,omitempty"`

	// Array of colors
	Palette *[]string `json:"palette,omitempty"`

	// The color value. This always starts with a '#', followed by a number of hexadecimal values representing rgb and - optionally - the alpha channel. Each channel may be either represented by a single character - in which case the values are from 0 to 15 - or by two characters - allowing a range from 0 to 255 per channel.
	Value *string `json:"value,omitempty"`

	// The parameter type. This is "ParamColor" for this type
	Valuetype *string `json:"valuetype,omitempty"`

	// Semantic information on the parameter, contains hints about how best to display the parameter
	View *ParameterView `json:"view,omitempty"`
}

// A column within a deck
type Column struct {
	// A multiple-choice parameter
	Colorid *ChoiceParameter `json:"colorid,omitempty"`

	// Get whether the column is currently connected
	Connected *struct {
		// Embedded struct due to allOf(#/components/schemas/BooleanParameter)
		BooleanParameter `yaml:",inline"`
	} `json:"connected,omitempty"`

	// The unique identifier of the column
	Id *int64 `json:"id,omitempty"`

	// A parameter containing string data
	Name *StringParameter `json:"name,omitempty"`
}

// The complete composition, containing all the decks, layers, clips and their effects
type Composition struct {
	// An audio track, as part of a clip,layer,group or a composition
	Audio *AudioTrack `json:"audio"`

	// A parameter containing a true or false value
	Bypassed *BooleanParameter `json:"bypassed,omitempty"`

	// A multiple-choice parameter
	Clipbeatsnap *ChoiceParameter `json:"clipbeatsnap,omitempty"`

	// A multiple-choice parameter
	Cliptarget *ChoiceParameter `json:"cliptarget,omitempty"`

	// A multiple-choice parameter
	Cliptriggerstyle *ChoiceParameter `json:"cliptriggerstyle,omitempty"`

	// All columns in the composition
	Columns *[]Column `json:"columns,omitempty"`

	// Cross fade between two clips
	Crossfader *CrossFader `json:"crossfader,omitempty"`

	// An unstructured collection of parameters. Parameters are presented as a map where the key is the name of the parameter and the value is the parameter itself. Parameters may be any valid parameter type.
	Dashboard *ParameterCollection `json:"dashboard,omitempty"`

	// All decks in the composition
	Decks *[]Deck `json:"decks,omitempty"`

	// All layergroups in the composition
	Layergroups *[]LayerGroup `json:"layergroups,omitempty"`

	// All layers in the composition
	Layers *[]Layer `json:"layers,omitempty"`

	// A parameter containing a floating-point value with a minimum and maximum allowed value.
	Master *RangeParameter `json:"master,omitempty"`

	// A parameter containing string data
	Name     *StringParameter `json:"name,omitempty"`
	Selected *struct {
		// Embedded struct due to allOf(#/components/schemas/BooleanParameter)
		BooleanParameter `yaml:",inline"`
		// Embedded fields due to inline allOf schema
	} `json:"selected,omitempty"`

	// A parameter containing a floating-point value with a minimum and maximum allowed value.
	Speed *RangeParameter `json:"speed,omitempty"`

	// The controller for various tempo-related aspects of the composition
	TempoController *TempoController `json:"tempo_controller,omitempty"`

	// A video track, as part of a clip,layer,group or a composition
	Video *VideoTrack `json:"video"`
}

// Cross fade between two clips
type CrossFader struct {
	// A multiple-choice parameter
	Behaviour *ChoiceParameter `json:"behaviour,omitempty"`

	// A multiple-choice parameter
	Curve *ChoiceParameter `json:"curve,omitempty"`

	// The unique identifier of the cross fader
	Id *int64 `json:"id,omitempty"`

	// An unstructured collection of parameters. Parameters are presented as a map where the key is the name of the parameter and the value is the parameter itself. Parameters may be any valid parameter type.
	Mixer *ParameterCollection `json:"mixer,omitempty"`

	// A parameter containing a floating-point value with a minimum and maximum allowed value.
	Phase *RangeParameter `json:"phase,omitempty"`

	// A parameter that handles events, but does not contain a value
	Sidea *EventParameter `json:"sidea,omitempty"`

	// A parameter that handles events, but does not contain a value
	Sideb *EventParameter `json:"sideb,omitempty"`
}

// A deck contains a full set of layers and clips. Only the layers and clips of the active deck can be retrieved and updated.
type Deck struct {
	// A multiple-choice parameter
	Colorid *ChoiceParameter `json:"colorid,omitempty"`

	// The unique identifier of the deck
	Id *int64 `json:"id,omitempty"`

	// A parameter containing string data
	Name *StringParameter `json:"name,omitempty"`

	// A parameter containing numeric data
	Scrollx *IntegerParameter `json:"scrollx,omitempty"`

	// Get whether the deck is currently selected
	Selected *struct {
		// Embedded struct due to allOf(#/components/schemas/BooleanParameter)
		BooleanParameter `yaml:",inline"`
	} `json:"selected,omitempty"`
}

// A parameter that handles events, but does not contain a value
type EventParameter struct {
	// The unique identifier of the parameter
	Id *int64 `json:"id,omitempty"`

	// The parameter type. This is "ParamEvent" for this type
	Valuetype *string `json:"valuetype,omitempty"`

	// Semantic information on the parameter, contains hints about how best to display the parameter
	View *ParameterView `json:"view,omitempty"`
}

// Frame rate expressed as ratio
type FrameRate struct {
	// Denominator
	Height *int32 `json:"height,omitempty"`

	// Numerator
	Num *int32 `json:"num,omitempty"`
}

// A parameter containing numeric data
type IntegerParameter struct {
	// The unique identifier of the parameter
	Id *int64 `json:"id,omitempty"`

	// The value for the parameter
	Value *int64 `json:"value,omitempty"`

	// The parameter type. This is "ParamNumber" for this type
	Valuetype *string `json:"valuetype,omitempty"`

	// Semantic information on the parameter, contains hints about how best to display the parameter
	View *ParameterView `json:"view,omitempty"`
}

// A layer is a container for clips that has its own dashboard and can be selected
type Layer struct {
	// An audio track, as part of a clip,layer,group or a composition
	Audio *AudioTrack `json:"audio"`

	// AutoPilot options to control automatic clip transitions
	Autopilot *AutoPilot `json:"autopilot"`

	// A parameter containing a true or false value
	Bypassed *BooleanParameter `json:"bypassed,omitempty"`

	// All clips belonging to this layer
	Clips *[]Clip `json:"clips,omitempty"`

	// A multiple-choice parameter
	Colorid *ChoiceParameter `json:"colorid,omitempty"`

	// A multiple-choice parameter
	Crossfadergroup *ChoiceParameter `json:"crossfadergroup,omitempty"`

	// An unstructured collection of parameters. Parameters are presented as a map where the key is the name of the parameter and the value is the parameter itself. Parameters may be any valid parameter type.
	Dashboard *ParameterCollection `json:"dashboard,omitempty"`

	// A parameter containing a true or false value
	Faderstart *BooleanParameter `json:"faderstart,omitempty"`

	// The unique id for the layer
	Id *int64 `json:"id,omitempty"`

	// A parameter containing a true or false value
	Ignorecolumntrigger *BooleanParameter `json:"ignorecolumntrigger,omitempty"`

	// A multiple-choice parameter
	Maskmode *ChoiceParameter `json:"maskmode,omitempty"`

	// A parameter containing a floating-point value with a minimum and maximum allowed value.
	Master *RangeParameter `json:"master,omitempty"`

	// A parameter containing string data
	Name *StringParameter `json:"name,omitempty"`

	// Get whether the layer is currently selected
	Selected *struct {
		// Embedded struct due to allOf(#/components/schemas/BooleanParameter)
		BooleanParameter `yaml:",inline"`
	} `json:"selected,omitempty"`

	// A parameter containing a true or false value
	Solo *BooleanParameter `json:"solo,omitempty"`

	// A layer transition describes the transition between clips within the layer
	Transition *LayerTransition `json:"transition,omitempty"`
	Video      *VideoTrackLayer `json:"video,omitempty"`
}

// A collection of layers, allowing controlling of a group of layers as a single object
type LayerGroup struct {
	// An audio track, as part of a clip,layer,group or a composition
	Audio *AudioTrack `json:"audio"`

	// A parameter containing a true or false value
	Bypassed *BooleanParameter `json:"bypassed,omitempty"`

	// A multiple-choice parameter
	Colorid *ChoiceParameter `json:"colorid,omitempty"`

	// A multiple-choice parameter
	Crossfadergroup *ChoiceParameter `json:"crossfadergroup,omitempty"`

	// An unstructured collection of parameters. Parameters are presented as a map where the key is the name of the parameter and the value is the parameter itself. Parameters may be any valid parameter type.
	Dashboard *ParameterCollection `json:"dashboard,omitempty"`

	// The unique id for the layer group
	Id *int64 `json:"id,omitempty"`

	// A parameter containing a true or false value
	Ignorecolumntrigger *BooleanParameter `json:"ignorecolumntrigger,omitempty"`

	// All the layers added to the layer group
	Layers *[]Layer `json:"layers,omitempty"`

	// A parameter containing a floating-point value with a minimum and maximum allowed value.
	Master *RangeParameter `json:"master,omitempty"`

	// A parameter containing string data
	Name *StringParameter `json:"name,omitempty"`

	// Get whether the layer group is currently selected
	Selected *struct {
		// Embedded struct due to allOf(#/components/schemas/BooleanParameter)
		BooleanParameter `yaml:",inline"`
	} `json:"selected,omitempty"`

	// A parameter containing a true or false value
	Solo *BooleanParameter `json:"solo,omitempty"`

	// A video track, as part of a clip,layer,group or a composition
	Video *VideoTrack `json:"video"`
}

// A layer transition describes the transition between clips within the layer
type LayerTransition struct {
	// A multiple-choice parameter
	BlendMode *ChoiceParameter `json:"blend_mode,omitempty"`

	// A parameter containing a floating-point value with a minimum and maximum allowed value.
	Duration *RangeParameter `json:"duration,omitempty"`
}

// An unstructured collection of parameters. Parameters are presented as a map where the key is the name of the parameter and the value is the parameter itself. Parameters may be any valid parameter type.
type ParameterCollection struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Semantic information on the parameter, contains hints about how best to display the parameter
type ParameterView struct {
	// Which control to show for the parameter
	ControlType *ParameterViewControlType `json:"control_type,omitempty"`

	// Which units to display.
	DisplayUnits *ParameterViewDisplayUnits `json:"display_units,omitempty"`

	// Value to multiply with when displaying value. For a parameter with a value between 0 and 1 should display as 0 to 100
	Multiplier *float64 `json:"multiplier,omitempty"`

	// Value increments to be used for e.g. sliding or rotary controls
	Step *float64 `json:"step,omitempty"`

	// The suffix to display for the variable. May be empty
	Suffix *string `json:"suffix,omitempty"`
}

// Which control to show for the parameter
type ParameterViewControlType string

// Which units to display.
type ParameterViewDisplayUnits string

// Generic information about the product serving the api
type ProductInfo struct {
	// The major version number of the Arena or Avenue instance handling the request.
	Major *int64 `json:"major,omitempty"`

	// The micro version number of the Arena or Avenue instance handling the request.
	Micro *int64 `json:"micro,omitempty"`

	// The minor version number of the Arena or Avenue instance handling the request.
	Minor *int64 `json:"minor,omitempty"`

	// The product name. This is either 'Arena' or 'Avenue'
	Name *string `json:"name,omitempty"`

	// The revision of the Arena or Avenue instance handling the request.
	Revision *int64 `json:"revision,omitempty"`
}

// A parameter containing a floating-point value with a minimum and maximum allowed value.
type RangeParameter struct {
	// The unique identifier of the parameter
	Id *int64 `json:"id,omitempty"`

	// The highest allowed value for the parameter, inclusive
	Max *float64 `json:"max,omitempty"`

	// The lowest allowed value for the parameter, inclusive
	Min *float64 `json:"min,omitempty"`

	// The value for the parameter
	Value *float64 `json:"value,omitempty"`

	// The parameter type. This is "ParamRange" for this type
	Valuetype *string `json:"valuetype,omitempty"`

	// Semantic information on the parameter, contains hints about how best to display the parameter
	View *ParameterView `json:"view,omitempty"`
}

// Options for resetting a parameter, should only the value be reset, or should animations also be reset
type ResetParameter struct {
	// If set to true, animations are also reset
	Resetanimation *bool `json:"resetanimation,omitempty"`
}

// A parameter containing string data
type StringParameter struct {
	// The unique identifier of the parameter
	Id *int64 `json:"id,omitempty"`

	// The value for the parameter
	Value *string `json:"value,omitempty"`

	// The parameter type. This is "ParamString" for this type
	Valuetype *string `json:"valuetype,omitempty"`

	// Semantic information on the parameter, contains hints about how best to display the parameter
	View *ParameterView `json:"view,omitempty"`
}

// The controller for various tempo-related aspects of the composition
type TempoController struct {
	// A parameter that handles events, but does not contain a value
	Resync *EventParameter `json:"resync,omitempty"`

	// A parameter containing a floating-point value with a minimum and maximum allowed value.
	Tempo *RangeParameter `json:"tempo,omitempty"`

	// A parameter that handles events, but does not contain a value
	TempoPull *EventParameter `json:"tempo_pull,omitempty"`

	// A parameter that handles events, but does not contain a value
	TempoPush *EventParameter `json:"tempo_push,omitempty"`

	// A parameter that handles events, but does not contain a value
	TempoTap *EventParameter `json:"tempo_tap,omitempty"`
}

// The timeline transport controls
type TransportBPMSync struct {
	// BPM Sync controls
	Controls *struct {
		// A multiple-choice parameter
		Beatloop *ChoiceParameter `json:"beatloop,omitempty"`

		// A parameter containing a floating-point value with a minimum and maximum allowed value.
		Bpm *RangeParameter `json:"bpm,omitempty"`

		// A parameter containing a floating-point value with a minimum and maximum allowed value.
		Duration *RangeParameter `json:"duration,omitempty"`

		// A multiple-choice parameter
		Playdirection *ChoiceParameter `json:"playdirection,omitempty"`

		// A multiple-choice parameter
		Playmode *ChoiceParameter `json:"playmode,omitempty"`

		// A multiple-choice parameter
		Playmodeaway *ChoiceParameter `json:"playmodeaway,omitempty"`

		// A parameter containing a floating-point value with a minimum and maximum allowed value.
		Speed *RangeParameter `json:"speed,omitempty"`

		// A multiple-choice parameter
		Syncmode *ChoiceParameter `json:"syncmode,omitempty"`
	} `json:"controls,omitempty"`

	// A parameter containing a floating-point value with a minimum and maximum allowed value.
	Position *RangeParameter `json:"position,omitempty"`
}

// The timeline transport controls
type TransportTimeline struct {
	// Timeline controls
	Controls *struct {
		// A parameter containing a floating-point value with a minimum and maximum allowed value.
		Duration *RangeParameter `json:"duration,omitempty"`

		// A multiple-choice parameter
		Playdirection *ChoiceParameter `json:"playdirection,omitempty"`

		// A multiple-choice parameter
		Playmode *ChoiceParameter `json:"playmode,omitempty"`

		// A multiple-choice parameter
		Playmodeaway *ChoiceParameter `json:"playmodeaway,omitempty"`

		// A parameter containing a floating-point value with a minimum and maximum allowed value.
		Speed *RangeParameter `json:"speed,omitempty"`
	} `json:"controls,omitempty"`

	// A parameter containing a floating-point value with a minimum and maximum allowed value.
	Position *RangeParameter `json:"position,omitempty"`
}

// A videoeffect represents a single effect in a chain of effects to be applied to a source. Properties on the videoeffect control how and what is rendered in the effect.
type VideoEffect struct {
	Bypassed *struct {
		// Embedded struct due to allOf(#/components/schemas/BooleanParameter)
		BooleanParameter `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		// Embedded fields due to inline allOf schema
	} `json:"bypassed,omitempty"`

	// An unstructured collection of parameters. Parameters are presented as a map where the key is the name of the parameter and the value is the parameter itself. Parameters may be any valid parameter type.
	Effect *ParameterCollection `json:"effect,omitempty"`

	// The unique id of the video effect instance
	Id *int64 `json:"id,omitempty"`

	// An unstructured collection of parameters. Parameters are presented as a map where the key is the name of the parameter and the value is the parameter itself. Parameters may be any valid parameter type.
	Mixer *ParameterCollection `json:"mixer,omitempty"`

	// The name of the effect
	Name *string `json:"name,omitempty"`

	// An unstructured collection of parameters. Parameters are presented as a map where the key is the name of the parameter and the value is the parameter itself. Parameters may be any valid parameter type.
	Params *ParameterCollection `json:"params,omitempty"`
}

// Meta information for a video file
type VideoFileInfo struct {
	// Duration of file expressed as hours:seconds:minutes:milliseconds
	Duration *string `json:"duration,omitempty"`

	// Duration of file expressed as milliseconds
	DurationMs *float64 `json:"duration_ms,omitempty"`

	// Whether file is actully present on disk at the given location
	Exists *bool `json:"exists,omitempty"`

	// Frame rate expressed as ratio
	Framerate *FrameRate `json:"framerate,omitempty"`

	// The number of pixels the video is high
	Height *int32 `json:"height,omitempty"`

	// The location of the file on disk
	Path *string `json:"path,omitempty"`

	// The number of pixels the video is wide
	Width *int32 `json:"width,omitempty"`
}

// A video track, as part of a clip,layer,group or a composition
type VideoTrack struct {
	// All the effects that may be applied when the video track is played
	Effects *[]VideoEffect `json:"effects,omitempty"`

	// The number of pixels the clip is high
	Height *int32 `json:"height,omitempty"`

	// An unstructured collection of parameters. Parameters are presented as a map where the key is the name of the parameter and the value is the parameter itself. Parameters may be any valid parameter type.
	Mixer *ParameterCollection `json:"mixer,omitempty"`

	// A parameter containing a floating-point value with a minimum and maximum allowed value.
	Opacity *RangeParameter `json:"opacity,omitempty"`

	// The number of pixels the clip is wide
	Width *int32 `json:"width,omitempty"`
}

// VideoTrackClip defines model for VideoTrackClip.
type VideoTrackClip struct {
	// Embedded struct due to allOf(#/components/schemas/VideoTrack)
	VideoTrack `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// A parameter containing a true or false value
	A *BooleanParameter `json:"a,omitempty"`

	// A parameter containing a true or false value
	B *BooleanParameter `json:"b,omitempty"`

	// The description of the source belonging to this video track
	Description *string `json:"description,omitempty"`

	// Meta information for a video file
	Fileinfo *VideoFileInfo `json:"fileinfo"`

	// A parameter containing a true or false value
	G *BooleanParameter `json:"g,omitempty"`

	// A parameter containing a true or false value
	R *BooleanParameter `json:"r,omitempty"`

	// A multiple-choice parameter
	Resize       *ChoiceParameter `json:"resize,omitempty"`
	Sourceparams *struct {
		// Embedded struct due to allOf(#/components/schemas/ParameterCollection)
		ParameterCollection `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		// Embedded fields due to inline allOf schema
	} `json:"sourceparams,omitempty"`
}

// VideoTrackLayer defines model for VideoTrackLayer.
type VideoTrackLayer struct {
	// Embedded struct due to allOf(#/components/schemas/VideoTrack)
	VideoTrack `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// A multiple-choice parameter
	Autosize *ChoiceParameter `json:"autosize,omitempty"`
}

// ReplaceCompositionJSONBody defines parameters for ReplaceComposition.
type ReplaceCompositionJSONBody Composition

// ReplaceClipByIdJSONBody defines parameters for ReplaceClipById.
type ReplaceClipByIdJSONBody Clip

// ClipConnectByIdJSONBody defines parameters for ClipConnectById.
type ClipConnectByIdJSONBody bool

// ResetClipParamByIdJSONBody defines parameters for ResetClipParamById.
type ResetClipParamByIdJSONBody ResetParameter

// ReplaceColumnByIdJSONBody defines parameters for ReplaceColumnById.
type ReplaceColumnByIdJSONBody Column

// ColumnConnectByIdJSONBody defines parameters for ColumnConnectById.
type ColumnConnectByIdJSONBody bool

// ResetColumnParamByIdJSONBody defines parameters for ResetColumnParamById.
type ResetColumnParamByIdJSONBody ResetParameter

// ReplaceColumnJSONBody defines parameters for ReplaceColumn.
type ReplaceColumnJSONBody Column

// ColumnConnectJSONBody defines parameters for ColumnConnect.
type ColumnConnectJSONBody bool

// ResetColumnParamJSONBody defines parameters for ResetColumnParam.
type ResetColumnParamJSONBody ResetParameter

// ReplaceDeckByIdJSONBody defines parameters for ReplaceDeckById.
type ReplaceDeckByIdJSONBody Deck

// ResetDeckParamByIdJSONBody defines parameters for ResetDeckParamById.
type ResetDeckParamByIdJSONBody ResetParameter

// ReplaceDeckJSONBody defines parameters for ReplaceDeck.
type ReplaceDeckJSONBody Deck

// ResetDeckParamJSONBody defines parameters for ResetDeckParam.
type ResetDeckParamJSONBody ResetParameter

// ReplaceEffectByIdJSONBody defines parameters for ReplaceEffectById.
type ReplaceEffectByIdJSONBody interface{}

// ReplaceLayergroupByIdJSONBody defines parameters for ReplaceLayergroupById.
type ReplaceLayergroupByIdJSONBody LayerGroup

// ResetLayerGroupParamByIdJSONBody defines parameters for ResetLayerGroupParamById.
type ResetLayerGroupParamByIdJSONBody ResetParameter

// ReplaceLayergroupJSONBody defines parameters for ReplaceLayergroup.
type ReplaceLayergroupJSONBody LayerGroup

// ResetLayerGroupParamJSONBody defines parameters for ResetLayerGroupParam.
type ResetLayerGroupParamJSONBody ResetParameter

// ReplaceLayerByIdJSONBody defines parameters for ReplaceLayerById.
type ReplaceLayerByIdJSONBody Layer

// ResetLayerParamByIdJSONBody defines parameters for ResetLayerParamById.
type ResetLayerParamByIdJSONBody ResetParameter

// ReplaceLayerJSONBody defines parameters for ReplaceLayer.
type ReplaceLayerJSONBody Layer

// ReplaceClipByPositionJSONBody defines parameters for ReplaceClipByPosition.
type ReplaceClipByPositionJSONBody Clip

// ClipConnectJSONBody defines parameters for ClipConnect.
type ClipConnectJSONBody bool

// ResetClipParamJSONBody defines parameters for ResetClipParam.
type ResetClipParamJSONBody ResetParameter

// ResetLayerParamJSONBody defines parameters for ResetLayerParam.
type ResetLayerParamJSONBody ResetParameter

// ResetCompositionParamJSONBody defines parameters for ResetCompositionParam.
type ResetCompositionParamJSONBody ResetParameter

// ReplaceCompositionJSONRequestBody defines body for ReplaceComposition for application/json ContentType.
type ReplaceCompositionJSONRequestBody ReplaceCompositionJSONBody

// ReplaceClipByIdJSONRequestBody defines body for ReplaceClipById for application/json ContentType.
type ReplaceClipByIdJSONRequestBody ReplaceClipByIdJSONBody

// ClipConnectByIdJSONRequestBody defines body for ClipConnectById for application/json ContentType.
type ClipConnectByIdJSONRequestBody ClipConnectByIdJSONBody

// ResetClipParamByIdJSONRequestBody defines body for ResetClipParamById for application/json ContentType.
type ResetClipParamByIdJSONRequestBody ResetClipParamByIdJSONBody

// ReplaceColumnByIdJSONRequestBody defines body for ReplaceColumnById for application/json ContentType.
type ReplaceColumnByIdJSONRequestBody ReplaceColumnByIdJSONBody

// ColumnConnectByIdJSONRequestBody defines body for ColumnConnectById for application/json ContentType.
type ColumnConnectByIdJSONRequestBody ColumnConnectByIdJSONBody

// ResetColumnParamByIdJSONRequestBody defines body for ResetColumnParamById for application/json ContentType.
type ResetColumnParamByIdJSONRequestBody ResetColumnParamByIdJSONBody

// ReplaceColumnJSONRequestBody defines body for ReplaceColumn for application/json ContentType.
type ReplaceColumnJSONRequestBody ReplaceColumnJSONBody

// ColumnConnectJSONRequestBody defines body for ColumnConnect for application/json ContentType.
type ColumnConnectJSONRequestBody ColumnConnectJSONBody

// ResetColumnParamJSONRequestBody defines body for ResetColumnParam for application/json ContentType.
type ResetColumnParamJSONRequestBody ResetColumnParamJSONBody

// ReplaceDeckByIdJSONRequestBody defines body for ReplaceDeckById for application/json ContentType.
type ReplaceDeckByIdJSONRequestBody ReplaceDeckByIdJSONBody

// ResetDeckParamByIdJSONRequestBody defines body for ResetDeckParamById for application/json ContentType.
type ResetDeckParamByIdJSONRequestBody ResetDeckParamByIdJSONBody

// ReplaceDeckJSONRequestBody defines body for ReplaceDeck for application/json ContentType.
type ReplaceDeckJSONRequestBody ReplaceDeckJSONBody

// ResetDeckParamJSONRequestBody defines body for ResetDeckParam for application/json ContentType.
type ResetDeckParamJSONRequestBody ResetDeckParamJSONBody

// ReplaceEffectByIdJSONRequestBody defines body for ReplaceEffectById for application/json ContentType.
type ReplaceEffectByIdJSONRequestBody ReplaceEffectByIdJSONBody

// ReplaceLayergroupByIdJSONRequestBody defines body for ReplaceLayergroupById for application/json ContentType.
type ReplaceLayergroupByIdJSONRequestBody ReplaceLayergroupByIdJSONBody

// ResetLayerGroupParamByIdJSONRequestBody defines body for ResetLayerGroupParamById for application/json ContentType.
type ResetLayerGroupParamByIdJSONRequestBody ResetLayerGroupParamByIdJSONBody

// ReplaceLayergroupJSONRequestBody defines body for ReplaceLayergroup for application/json ContentType.
type ReplaceLayergroupJSONRequestBody ReplaceLayergroupJSONBody

// ResetLayerGroupParamJSONRequestBody defines body for ResetLayerGroupParam for application/json ContentType.
type ResetLayerGroupParamJSONRequestBody ResetLayerGroupParamJSONBody

// ReplaceLayerByIdJSONRequestBody defines body for ReplaceLayerById for application/json ContentType.
type ReplaceLayerByIdJSONRequestBody ReplaceLayerByIdJSONBody

// ResetLayerParamByIdJSONRequestBody defines body for ResetLayerParamById for application/json ContentType.
type ResetLayerParamByIdJSONRequestBody ResetLayerParamByIdJSONBody

// ReplaceLayerJSONRequestBody defines body for ReplaceLayer for application/json ContentType.
type ReplaceLayerJSONRequestBody ReplaceLayerJSONBody

// ReplaceClipByPositionJSONRequestBody defines body for ReplaceClipByPosition for application/json ContentType.
type ReplaceClipByPositionJSONRequestBody ReplaceClipByPositionJSONBody

// ClipConnectJSONRequestBody defines body for ClipConnect for application/json ContentType.
type ClipConnectJSONRequestBody ClipConnectJSONBody

// ResetClipParamJSONRequestBody defines body for ResetClipParam for application/json ContentType.
type ResetClipParamJSONRequestBody ResetClipParamJSONBody

// ResetLayerParamJSONRequestBody defines body for ResetLayerParam for application/json ContentType.
type ResetLayerParamJSONRequestBody ResetLayerParamJSONBody

// ResetCompositionParamJSONRequestBody defines body for ResetCompositionParam for application/json ContentType.
type ResetCompositionParamJSONRequestBody ResetCompositionParamJSONBody

// Getter for additional properties for ParameterCollection. Returns the specified
// element and whether it was found
func (a ParameterCollection) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ParameterCollection
func (a *ParameterCollection) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ParameterCollection to handle AdditionalProperties
func (a *ParameterCollection) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ParameterCollection to handle AdditionalProperties
func (a ParameterCollection) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
